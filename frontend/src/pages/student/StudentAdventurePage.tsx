import { useState, useEffect } from 'react';
import { useGetCurrentLessonQuery, useSubmitLessonMutation } from '../../features/student/studentApi';
import Spinner from '../../components/common/Spinner';
import { toast } from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';

export default function StudentAdventurePage() {
    const navigate = useNavigate();
    const { data: lesson, isLoading, isError } = useGetCurrentLessonQuery();
    const [submitLesson, { isLoading: isSubmitting }] = useSubmitLessonMutation();

    const [currentBlockIndex, setCurrentBlockIndex] = useState(0);
    // –ï–¥–∏–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É. –ö–ª—é—á - –∏–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç.
    const [practiceAnswers, setPracticeAnswers] = useState<Record<number, string>>({});
    // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é.
    const [storyResponse, setStoryResponse] = useState('');

    const blocks = lesson?.content?.blocks || [];
    const currentBlock = blocks[currentBlockIndex];
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é.
    const isContentViewFinished = currentBlockIndex >= blocks.length;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
    useEffect(() => {
        if (lesson) {
            setCurrentBlockIndex(0);
            setPracticeAnswers({});
            setStoryResponse('');
        }
    }, [lesson]);
    
    const handleAnswerChange = (text: string) => {
        setPracticeAnswers(prev => ({
            ...prev,
            [currentBlockIndex]: text,
        }));
    };

    const handleNextBlock = () => {
        if (!currentBlock) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –±–ª–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞ –Ω–µ–≥–æ –¥–∞–Ω –æ—Ç–≤–µ—Ç.
        if (currentBlock.type === 'practice' && !practiceAnswers[currentBlockIndex]?.trim()) {
            toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
            return;
        }

        setCurrentBlockIndex(prev => prev + 1);
    };

    const handleSubmitLesson = async () => {
        if (!lesson || !storyResponse.trim()) {
            toast.error("–ù–∞–ø–∏—à–∏, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏!");
            return;
        }

        // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –æ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const orderedPracticeAnswers = blocks
            .map((block, index) => ({ block, index }))
            .filter(({ block }) => block.type === 'practice')
            .map(({ index }) => practiceAnswers[index] || ''); // –ë–µ—Ä–µ–º –æ—Ç–≤–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

        try {
            await submitLesson({
                lessonId: lesson.id,
                answers: orderedPracticeAnswers,
                studentResponseText: storyResponse,
            }).unwrap();
            
            toast.success("–û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π...", { duration: 2000 });
            // RTK Query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç `getCurrentLesson` –±–ª–∞–≥–æ–¥–∞—Ä—è invalidatesTags.
            // –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é.
        } catch (err) {
            console.error('Error submitting lesson:', err);
            toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫.");
        }
    };
    
    // --- –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê ---

    if (isLoading) {
        return <div className="flex justify-center items-center h-96"><Spinner size="lg" /></div>;
    }

    if (isError) {
        return <div className="text-center text-red-500 p-10">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</div>;
    }

    if (!lesson) {
        return (
            <div className="text-center p-10 bg-white rounded-lg shadow">
                <h2 className="text-2xl font-bold text-green-600">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ</h2>
                <p className="mt-4 text-lg text-gray-700">–¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ–º —É—á–µ–±–Ω–æ–º –ø–ª–∞–Ω–µ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!</p>
                <button onClick={() => navigate('/student')} className="mt-6 px-4 py-2 bg-blue-600 text-white rounded-md">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç</button>
            </div>
        );
    }

    return (
        <div className="max-w-4xl mx-auto p-4 md:p-6 space-y-8">
            <h1 className="text-3xl font-bold text-gray-900">{lesson.title}</h1>

            {/* –ë–õ–û–ö 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞ (–ø–æ—à–∞–≥–æ–≤–æ) */}
            {!isContentViewFinished && currentBlock && (
                <div className="bg-white rounded-lg shadow-md p-6">
                    <p className="text-sm text-gray-500 mb-4">–®–∞–≥ {currentBlockIndex + 1} –∏–∑ {blocks.length}</p>
                    <div className={`p-4 border-l-4 rounded-r-lg ${currentBlock.type === 'theory' ? 'border-blue-500 bg-blue-50' : 'border-purple-500 bg-purple-50'}`}>
                        <h3 className="font-semibold text-lg mb-2">{currentBlock.type === 'theory' ? 'üìö –¢–µ–æ—Ä–∏—è' : '‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–µ'}</h3>
                        <p className="text-gray-800" dangerouslySetInnerHTML={{ __html: currentBlock.content }} />
                        
                        {currentBlock.type === 'practice' && (
                            <div className="mt-4">
                                <label htmlFor={`answer-${currentBlockIndex}`} className="block text-sm font-medium text-gray-700 mb-1">–í–∞—à –æ—Ç–≤–µ—Ç:</label>
                                <textarea
                                    id={`answer-${currentBlockIndex}`}
                                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500"
                                    rows={3}
                                    value={practiceAnswers[currentBlockIndex] || ''}
                                    onChange={(e) => handleAnswerChange(e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å..."
                                />
                            </div>
                        )}
                    </div>
                    <div className="flex justify-end mt-4">
                        <button onClick={handleNextBlock} disabled={isSubmitting} className="px-6 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700">
                            –î–∞–ª–µ–µ
                        </button>
                    </div>
                </div>
            )}

            {/* –ë–õ–û–ö 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ */}
            {isContentViewFinished && (
                 <div className="bg-indigo-50 rounded-lg shadow-md p-6">
                     <h2 className="text-2xl font-bold text-indigo-700 mb-4">–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...</h2>
                     {lesson.storyChapter ? (
                         <>
                             <div className="flex flex-col md:flex-row gap-6 items-center">
                                 <p className="flex-1 text-gray-700 leading-relaxed italic">{lesson.storyChapter.teacherSnippetText}</p>
                                 {lesson.storyChapter.teacherSnippetImageUrl && (
                                     <img src={lesson.storyChapter.teacherSnippetImageUrl} alt="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è" className="w-full md:w-1/3 rounded-lg object-cover shadow-lg"/>
                                 )}
                             </div>
                             <div className="mt-6">
                                 <label htmlFor="storyResponse" className="block text-lg font-semibold text-gray-800 mb-2">
                                     –ß—Ç–æ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
                                 </label>
                                 <textarea
                                     id="storyResponse"
                                     rows={4}
                                     className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500"
                                     value={storyResponse}
                                     onChange={(e) => setStoryResponse(e.target.value)}
                                     placeholder="–ù–∞–ø–∏—à–∏ –∑–¥–µ—Å—å —Å–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
                                     disabled={isSubmitting}
                                 />
                             </div>
                             <div className="flex justify-end mt-4">
                                 <button onClick={handleSubmitLesson} disabled={isSubmitting || !storyResponse.trim()} className="px-8 py-3 bg-green-600 text-white font-bold rounded-lg hover:bg-green-700 disabled:opacity-50">
                                     {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫'}
                                 </button>
                             </div>
                         </>
                     ) : (
                         <p>–ö —ç—Ç–æ–º—É —É—Ä–æ–∫—É –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.</p>
                     )}
                 </div>
            )}
        </div>
    );
}