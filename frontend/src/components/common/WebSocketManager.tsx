// –§–∞–π–ª: tutor-game/frontend/src/components/common/WebSocketManager.tsx
// –í–µ—Ä—Å–∏—è: –ü–æ–ª–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ –≥–æ—Ç–æ–≤–∞—è –∫ —Ä–∞–±–æ—Ç–µ

import React, { useEffect, useState, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import { useAppSelector, useAppDispatch } from '../../app/hooks';
import { addMessage } from '../../features/chat/chatSlice';
import { SocketContext } from '../../context/SocketContext';
import toast, { Toaster } from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';
import { StudentSubmittedLessonEvent, TeacherReviewedLessonEvent, StudentRequestedReviewEvent } from '../../types/websocket';

export const WebSocketProvider = ({ children }: { children: React.ReactNode }) => {
  const { user, token } = useAppSelector((state) => ({
    user: state.auth.user,
    token: state.auth.token,
  }));
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const [socket, setSocket] = useState<Socket | null>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –£–ß–ò–¢–ï–õ–Ø, –∫–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫ —Å–¥–∞–ª —É—Ä–æ–∫
  const handleStudentSubmitted = useCallback((data: StudentSubmittedLessonEvent) => {
    console.log('üì¨ [WebSocket] Received student_submitted_lesson:', data);
    toast.custom(
      (t) => (
        <div className="max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5">
          <div className="flex-1 w-0 p-4">
            <div className="flex items-start">
              <div className="flex-shrink-0 pt-0.5">
                <span className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center text-lg">üìö</span>
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm font-medium text-gray-900">–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —É—á–µ–Ω–∏–∫–∞</p>
                <p className="mt-1 text-sm text-gray-500">{`–£—á–µ–Ω–∏–∫ ${data.studentName} –∂–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!`}</p>
              </div>
            </div>
          </div>
          <div className="flex border-l border-gray-200">
            <button
              onClick={() => {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø—Ä—è–º–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω—É–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                navigate(`/teacher/goals/${data.goalId}/edit`);
                toast.dismiss(t.id);
              }}
              className="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              –ü–µ—Ä–µ–π—Ç–∏
            </button>
          </div>
        </div>
      ), { 
        duration: Infinity, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç "–≤–∏—Å–µ—Ç—å" –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        position: 'top-right' 
      }
    );
  }, [navigate]);

  // Handler for when student requests a review lesson
  const handleStudentRequestedReview = useCallback((data: StudentRequestedReviewEvent) => {
    console.log('üì¨ [WebSocket] Received student_requested_review:', data);
    toast.custom(
      (t) => (
        <div className="max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5">
          <div className="flex-1 w-0 p-4">
            <div className="flex items-start">
              <div className="flex-shrink-0 pt-0.5">
                <span className="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center text-lg">üí°</span>
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm font-medium text-gray-900">–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</p>
                <p className="mt-1 text-sm text-gray-500">{data.message}</p>
              </div>
            </div>
          </div>
          <div className="flex border-l border-gray-200">
            <button
              onClick={() => {
                navigate(`/teacher/goals/${data.goalId}/edit`);
                toast.dismiss(t.id);
              }}
              className="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              –ö –ø–ª–∞–Ω—É
            </button>
          </div>
        </div>
      ), { 
        duration: Infinity, 
        position: 'top-right' 
      }
    );
  }, [navigate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¢–£–î–ï–ù–¢–ê, –∫–æ–≥–¥–∞ —É—á–∏—Ç–µ–ª—å —É—Ç–≤–µ—Ä–¥–∏–ª —É—Ä–æ–∫
  const handleTeacherReviewed = useCallback((data: TeacherReviewedLessonEvent) => {
    console.log('‚úÖ [WebSocket] Received teacher_reviewed_lesson:', data);
    toast.custom(
      (t) => (
        <div className="max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5">
           <div className="flex-1 w-0 p-4">
            <div className="flex items-start">
              <div className="flex-shrink-0 pt-0.5">
                 <span className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center text-lg">üéâ</span>
              </div>
              <div className="ml-3 flex-1">
                <p className="text-sm font-medium text-gray-900">–í–∞—Å –∂–¥–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!</p>
                <p className="mt-1 text-sm text-gray-500">{`${data.teacherName} –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) –¥–ª—è –≤–∞—Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.`}</p>
              </div>
            </div>
          </div>
          <div className="flex border-l border-gray-200">
            <button
              onClick={() => {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
                navigate('/student/adventure');
                toast.dismiss(t.id);
              }}
              className="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              –ù–∞—á–∞—Ç—å
            </button>
          </div>
        </div>
      ), { 
        duration: Infinity, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç "–≤–∏—Å–µ—Ç—å" –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        position: 'top-right' 
      }
    );
  }, [navigate]);

  useEffect(() => {
    if (user && token) {
      const socketUrl = import.meta.env.VITE_API_URL || 'http://localhost:3002';
      const newSocket = io(socketUrl, {
        auth: { token },
        transports: ['websocket'],
      });

      setSocket(newSocket);

      // --- –ï–¥–∏–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π ---
      newSocket.on('connect', () => console.log('[WebSocket] Connected to server.'));
      newSocket.on('disconnect', () => console.log('[WebSocket] Disconnected from server.'));

      // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —á–∞—Ç–∞
      newSocket.on('message', (message: any) => {
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
        dispatch(addMessage({ message, currentUserId: user.id }));
      });

      // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —É—Ä–æ–∫–∞
      newSocket.on('student_submitted_lesson', handleStudentSubmitted);
      newSocket.on('student_requested_review', handleStudentRequestedReview);
      newSocket.on('teacher_reviewed_lesson', handleTeacherReviewed);
      
      // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      return () => {
        console.log('[WebSocket] Disconnecting socket.');
        newSocket.off('connect');
        newSocket.off('disconnect');
        newSocket.off('message');
        newSocket.off('student_submitted_lesson');
        newSocket.off('student_requested_review');
        newSocket.off('teacher_reviewed_lesson');
        newSocket.disconnect();
      };
    }
  }, [user, token, dispatch, handleStudentSubmitted, handleTeacherReviewed, handleStudentRequestedReview]);

  return (
    <SocketContext.Provider value={socket}>
      <Toaster />
      {children}
    </SocketContext.Provider>
  );
};
