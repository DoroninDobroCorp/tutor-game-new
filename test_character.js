const axios = require('axios');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

// ‚Äî‚Äî‚Äî –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚Äî‚Äî‚Äî
const LEONARDO_API_KEY = '3147ce22-4d50-45de-943d-31004bfc1426'; // –í–∞—à API –∫–ª—é—á
const BASE_URL = 'https://cloud.leonardo.ai/api/rest/v1';
const MODEL_ID = 'aa77f04e-3eec-4034-9c07-d0f619684628';  // Kino XL
const IMG_SIZE = 768;

const HEADERS = {
    'Authorization': `Bearer ${LEONARDO_API_KEY}`,
    'Accept': 'application/json',
    'Content-Type': 'application/json',
};

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function waitReady(gen_id, interval = 3) {
    const url = `${BASE_URL}/generations/${gen_id}`;
    console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (ID: ${gen_id})...`);
    while (true) {
        const response = await axios.get(url, { headers: HEADERS });
        const data = response.data?.generations_by_pk || {};
        const status = data.status;

        if (status === 'COMPLETE') {
            console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            const img = data.generated_images[0];
            return { id: img.id, url: img.url };
        }
        if (status === 'FAILED' || status === 'CANCELLED') {
            throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${gen_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}`);
        }
        await new Promise(resolve => setTimeout(resolve, interval * 1000));
    }
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ 2 —ç—Ç–∞–ø–∞
async function uploadImage(filePath) {
    // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('--- –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ ---');
    const initResponse = await axios.post(`${BASE_URL}/init-image`, {
        extension: "jpg"
    }, { headers: HEADERS });

    const uploadData = initResponse.data?.uploadInitImage;
    if (!uploadData || !uploadData.id) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É. –û—Ç–≤–µ—Ç API: ' + JSON.stringify(initResponse.data));
    }
    
    const imageId = uploadData.id;
    const uploadUrl = uploadData.url;
    const fields = JSON.parse(uploadData.fields);
    
    console.log(`–ü–æ–ª—É—á–µ–Ω ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageId}`);

    // –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ S3
    console.log('--- –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –æ–±–ª–∞–∫–æ ---');
    const formData = new FormData();
    Object.entries(fields).forEach(([key, value]) => {
        formData.append(key, value);
    });
    formData.append('file', fs.createReadStream(filePath));

    const uploadResponse = await axios.post(uploadUrl, formData, {
        headers: { ...formData.getHeaders() },
    });

    if (uploadResponse.status !== 204) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –°—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
    }

    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!');
    return { imageId: imageId };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω—ã —Å —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
async function createScene(prompt, imageId, characterWeight) { // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    const payload = {
        height: IMG_SIZE,
        width: IMG_SIZE,
        modelId: MODEL_ID,
        prompt: prompt,
        num_images: 1,
        alchemy: true,
        controlnets: [{
            initImageId: imageId,
            initImageType: 'UPLOADED',
            preprocessorId: 133,  // Character Reference
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: API Leonardo –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–µ 'weight', –∞ –Ω–µ 'strength'
            weight: characterWeight, 
        }],
    };

    console.log('--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã ---');
    console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(payload, null, 2));

    try {
        const response = await axios.post(`${BASE_URL}/generations`, payload, { headers: HEADERS });
        const job = response.data?.sdGenerationJob || {};
        const gen_id = job.generationId;

        if (!gen_id) {
            throw new Error('–û—à–∏–±–∫–∞ API Leonardo:\n' + JSON.stringify(response.data, null, 2));
        }

        return waitReady(gen_id);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω—ã:', error.response?.data || error.message);
        throw error;
    }
}


async function main() {
    const imagePath = path.join(__dirname, '1.jpg');
    
    const characterDescription = "a cute white rabbit character";

    const scenes = [
        `cinematic photo of ${characterDescription} exploring a magical, glowing forest at night, fantasy art, highly detailed`,
        `epic portrait of ${characterDescription} as an astronaut in a detailed space suit, floating in deep space with a nebula in the background, cinematic lighting`,
        `dramatic action shot of ${characterDescription} as a tiny knight in shining armor, bravely facing a huge, sleeping dragon in a cave full of gold, fantasy painting`
    ];

    const outputDir = path.join(__dirname, 'output');
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir);
    }

    try {
        console.log("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–±–µ–ª—ã–π –∫—Ä–æ–ª–∏–∫)...");
        const { imageId } = await uploadImage(imagePath);
        
        // --- –ì–õ–ê–í–ù–´–ô –ü–ê–†–ê–ú–ï–¢–† –î–õ–Ø –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í ---
        // –¢–µ–ø–µ—Ä—å –æ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ 'weight'
        const weightValue = 1.15; 

        for (let i = 0; i < scenes.length; i++) {
            const prompt = scenes[i];
            console.log(`\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É ${i + 1} —Å –≤–µ—Å–æ–º (weight) ${weightValue}‚Ä¶`);
            const { url: sceneUrl } = await createScene(prompt, imageId, weightValue);
            const imageFilePath = path.join(outputDir, `scene_${i + 1}.jpg`);
            
            console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...`);
            const imageBuffer = await axios.get(sceneUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(imageFilePath, imageBuffer.data);
            console.log(`‚úÖ –°—Ü–µ–Ω–∞ ${i + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${imageFilePath}`);
        }

        console.log("\nüéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É output!");
    } catch (error) {
        console.error("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    }
}

main();