// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum Role {
  STUDENT
  TEACHER
}

enum LessonType {
  THEORY
  PRACTICE
  WITH_TEACHER
  CONTROL_WORK
}

enum LessonStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  COMPLETED
}


// --- CORE MODELS ---
model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  firstName  String?
  lastName   String?
  lastActive DateTime?
  role       Role
  createdAt  DateTime  @default(now())

  // Relations
  teacher          Teacher?
  student          Student?
  sentMessages     Message[] @relation("Sender")
  receivedMessages Message[] @relation("Recipient")

  // Teacher relations
  taughtGoals LearningGoal[] @relation("LearningGoalTeacher")

  // Student relations
  learningGoals   LearningGoal[]          @relation("LearningGoalStudent")
  performanceLogs StudentPerformanceLog[]
  refreshTokens   RefreshToken[]
}

model Teacher {
  // userId is both primary key and foreign key
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  students Student[] @relation("TeachersAndStudents")

  @@map("teachers")
}

model Student {
  // userId is both primary key and foreign key
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  teachers Teacher[] @relation("TeachersAndStudents")

  @@map("students")
}

// --- LEARNING FLOW MODELS ---
model LearningGoal {
  id                String   @id @default(uuid())
  subject           String
  setting           String
  studentAge        Int
  language          String   @default("Russian")
  illustrationStyle String   @default("ILLUSTRATION") // ILLUSTRATION or ANIME
  createdAt         DateTime @default(now())

  // Relations
  teacherId String
  teacher   User   @relation("LearningGoalTeacher", fields: [teacherId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation("LearningGoalStudent", fields: [studentId], references: [id], onDelete: Cascade)

  sections ContentSection[]

  // --- CHARACTER FIELDS ---
  characterPrompt             String?
  characterImageUrl           String? // Прямой URL на готовое изображение
  characterSubjectDescription String? // English description for Imagen AI
  // ------------------------

  // --- STORY CHAPTERS ---
  storyChapters StoryChapter[]
  // ----------------------

  @@map("learning_goals")
}

model ContentSection {
  id             String       @id @default(uuid())
  title          String
  order          Int
  learningGoalId String
  learningGoal   LearningGoal @relation(fields: [learningGoalId], references: [id], onDelete: Cascade)
  lessons        Lesson[]

  @@map("content_sections")
}

model Lesson {
  id              String                  @id @default(uuid())
  title           String
  order           Int
  type            LessonType              @default(PRACTICE)
  status          LessonStatus            @default(DRAFT)
  content         Json?
  sectionId       String
  section         ContentSection          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  performanceLogs StudentPerformanceLog[]

  // --- STORY CHAPTER RELATION ---
  storyChapter StoryChapter?
  // ------------------------------

  @@map("lessons")
}

model StudentPerformanceLog {
  id         String   @id @default(uuid())
  isCorrect  Boolean?
  answer     String
  question   String?
  blockIndex Int?     @map("block_index")
  blockType  String?  @map("block_type")
  aiNote     String?
  createdAt  DateTime @default(now()) @map("created_at")
  studentId  String   @map("student_id")
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId   String   @map("lesson_id")
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("student_performance_logs")
}

// --- OTHER MODELS ---

model StoryChapter {
  id                        String       @id @default(uuid())
  lessonId                  String       @unique
  lesson                    Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  learningGoalId            String
  learningGoal              LearningGoal @relation(fields: [learningGoalId], references: [id], onDelete: Cascade)
  teacherSnippetText        String?
  teacherSnippetImageUrl    String?
  teacherSnippetImagePrompt String? // Prompt used to generate the image
  teacherSnippetStatus      String       @default("DRAFT") // DRAFT, PENDING_APPROVAL, APPROVED, COMPLETED
  studentSnippetText        String?
  studentSnippetImageUrl    String?
  studentSnippetStatus      String       @default("LOCKED") // LOCKED, DRAFT, SUBMITTED, APPROVED
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt

  @@map("story_chapters")
}

model Message {
  id          String    @id @default(uuid())
  senderId    String
  recipientId String
  content     String
  read        Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  sender      User      @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User      @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("token_blacklists")
}

// -------------------------

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

// Many-to-many relation between Teacher and Student is defined using the @relation("TeachersAndStudents")