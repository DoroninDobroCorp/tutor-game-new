import vertexai
from vertexai.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold
import google.generativeai as genai
import os
import subprocess
import time
import re
import platform
import sys
import hashlib
import json

# --- –ö–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏ (–ü–∞–ª–∏—Ç—Ä–∞ "Nordic Calm") ---
class Colors:
    # --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ ---
    FAIL = '\033[38;2;191;97;106m'      # –ö—Ä–∞—Å–Ω—ã–π (Aurora Red)
    OKGREEN = '\033[38;2;163;190;140m'   # –ó–µ–ª–µ–Ω—ã–π (Aurora Green)
    WARNING = '\033[38;2;235;203;139m'   # –ñ–µ–ª—Ç—ã–π (Aurora Yellow)
    OKBLUE = '\033[38;2;94;129;172m'     # –ì–æ–ª—É–±–æ–π (Polar Night Blue)
    HEADER = '\033[38;2;180;142;173m'   # –ü—É—Ä–ø—É—Ä–Ω—ã–π (Aurora Purple)
    CYAN = '\033[38;2;136;192;208m'     # –ë–∏—Ä—é–∑–æ–≤—ã–π (Aurora Cyan)
    
    # --- –°—Ç–∏–ª–∏ ---
    ENDC = '\033[0m'                    # –°–±—Ä–æ—Å
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    
    # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è) ---
    GREY = '\033[38;2;106;114;128m'      # –°–µ—Ä—ã–π –¥–ª—è –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
GOOGLE_API_KEY = "AIzaSyCGVITo4g7NqkNXpv2JjgiIguPWvqnbnWM"

GOOGLE_CLOUD_PROJECT = "useful-gearbox-464618-v3"
GOOGLE_CLOUD_LOCATION = "us-central1"
MODEL_NAME = "gemini-2.5-pro"

CONTEXT_SCRIPT = 'AskGpt.py'
CONTEXT_FILE = 'message_1.txt'
HISTORY_FILE = 'sloth_history.json'
ALLOWED_COMMANDS = (
    "sed", "rm", "mv", "touch", "mkdir", "npm", "npx", "yarn", "pnpm", "git", "echo", "./", "cat"
)
MAX_ITERATIONS = 15
API_TIMEOUT_SECONDS = 600

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ ---
model = None
ACTIVE_API_SERVICE = "N/A"
# –§–ª–∞–≥ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–∞–∑–∞ Google AI API –í –¢–ï–ö–£–©–ï–ô –°–ï–°–°–ò–ò. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ.
GOOGLE_AI_HAS_FAILED_THIS_SESSION = False

def initialize_model():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å Gemini.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Google API Key. –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: Vertex AI.
    –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç, –µ—Å–ª–∏ Google API Key –æ—Ç–∫–∞–∑–∞–ª –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
    """
    global model, ACTIVE_API_SERVICE, GOOGLE_AI_HAS_FAILED_THIS_SESSION

    print(f"{Colors.CYAN}‚öôÔ∏è  –õ–û–ì: –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ú–æ–¥–µ–ª—å: {MODEL_NAME}{Colors.ENDC}")

    generation_config = {
        "temperature": 1, "top_p": 1, "top_k": 1, "max_output_tokens": 32768
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥. –ï—Å–ª–∏ API –∫–ª—é—á —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.
    if not GOOGLE_AI_HAS_FAILED_THIS_SESSION and GOOGLE_API_KEY and "–í–ê–®_API_–ö–õ–Æ–ß" not in GOOGLE_API_KEY:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–æ–ª–µ–µ —è–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ >>>
        print(f"{Colors.CYAN}üîë –õ–û–ì: –ü—Ä–æ–±—É—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: Google AI (API Key)...{Colors.ENDC}")
        try:
            genai.configure(api_key=GOOGLE_API_KEY)
            genai_safety_settings = {
                'HARM_CATEGORY_HARASSMENT': 'block_medium_and_above',
                'HARM_CATEGORY_HATE_SPEECH': 'block_medium_and_above',
                'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'block_medium_and_above',
                'HARM_CATEGORY_DANGEROUS_CONTENT': 'block_none'
            }
            model = genai.GenerativeModel(
                model_name=MODEL_NAME,
                generation_config=generation_config,
                safety_settings=genai_safety_settings
            )
            # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
            model.generate_content("test", request_options={"timeout": 60})
            ACTIVE_API_SERVICE = "Google AI (API Key)"
            print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {ACTIVE_API_SERVICE}.{Colors.ENDC}")
            return
        except Exception as e:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Google AI API Key: {e}{Colors.ENDC}")
            print(f"{Colors.CYAN}üîÑ –õ–û–ì: –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (Vertex AI) –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.{Colors.ENDC}")
            GOOGLE_AI_HAS_FAILED_THIS_SESSION = True # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫–∞–∑ –Ω–∞ –≤—Ä–µ–º—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            model = None
    elif GOOGLE_AI_HAS_FAILED_THIS_SESSION:
        print(f"{Colors.CYAN}üîë –õ–û–ì: Google AI API —Ä–∞–Ω–µ–µ –æ—Ç–∫–∞–∑–∞–ª –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏. –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É—é Vertex AI.{Colors.ENDC}")
    else:
        print(f"{Colors.CYAN}üîë –õ–û–ì: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é Vertex AI.{Colors.ENDC}")

    try:
        print(f"{Colors.CYAN}üî© –õ–û–ì: –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Vertex AI...{Colors.ENDC}")
        vertexai.init(project=GOOGLE_CLOUD_PROJECT, location=GOOGLE_CLOUD_LOCATION)
        vertex_safety_settings = {
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
        model = GenerativeModel(
            model_name=MODEL_NAME,
            generation_config=generation_config,
            safety_settings=vertex_safety_settings
        )
        ACTIVE_API_SERVICE = "Vertex AI"
        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: Vertex AI SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {ACTIVE_API_SERVICE}.{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤.{Colors.ENDC}")
        print(f"{Colors.FAIL}   - –û—à–∏–±–∫–∞ Vertex AI: {e}{Colors.ENDC}")
        sys.exit(1)


# --- –ë–õ–û–ö –ü–†–û–ú–ü–¢-–®–ê–ë–õ–û–ù–û–í ---

def get_command_rules():
    return f"""
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å shell-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê:**

1.  **–°–¢–†–ê–¢–ï–ì–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô:**
    *   **–¢–æ—á–µ—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ (`sed`):** –ò—Å–ø–æ–ª—å–∑—É–π `sed` **—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö, –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö** –∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–∂–Ω—ã—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.
    *   **–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å (`cat`):** –ò—Å–ø–æ–ª—å–∑—É–π `cat <<'EOF' > path/to/file.txt ... EOF`, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å **—Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏, JSX-—Ä–∞–∑–º–µ—Ç–∫—É, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –ø–æ–¥—Ä—è–¥ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏/—Å–∏–º–≤–æ–ª–∞–º–∏**. –≠—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞. **–ù–µ –ø—ã—Ç–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `sed` –¥–ª—è —ç—Ç–∏—Ö —Ü–µ–ª–µ–π!**

2.  **–ü–ï–†–ï–ó–ê–ü–ò–°–¨ –§–ê–ô–õ–û–í (–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!):**
    *   **–í–ù–ò–ú–ê–ù–ò–ï:** –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ `cat` —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–†–ï–î–ï–õ–¨–ù–û –ê–ö–ö–£–†–ê–¢–ï–ù. –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π –≤ –±–ª–æ–∫ `EOF` **–ø–æ–ª–Ω–æ–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ** —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    *   **–°–¢–†–ê–¢–ï–ì–ò–Ø "–û–î–ò–ù –ë–û–õ–¨–®–û–ô –ó–ê –†–ê–ó":** –ï—Å–ª–∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ **–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö** –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤, –∏–∑–º–µ–Ω—è–π **—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é**.

3.  **–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê ‚Äî –≠–¢–û –ó–ê–ö–û–ù:**
    *   **–î–µ–π—Å—Ç–≤–∏—è:** –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏, —Ç–≤–æ–π –æ—Ç–≤–µ—Ç **–û–ë–Ø–ó–ê–ù** —Å–æ–¥–µ—Ä–∂–∞—Ç—å –î–í–ê –±–ª–æ–∫–∞:
        1. –ë–ª–æ–∫ –∫–æ–º–∞–Ω–¥, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ ```bash ... ```.
        2. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ ‚Äî –±–ª–æ–∫ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ ```summary ... ```.
    *   **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:**
        *   –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞ –∏ **–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞**, –Ω–∞–ø–∏—à–∏ **—Ç–æ–ª—å–∫–æ** `–ì–û–¢–û–í–û`. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤—å –±–ª–æ–∫ ```done_summary ... ``` —Å –∫—Ä–∞—Ç–∫–∏–º –ø–µ—Ä–µ—á–Ω–µ–º –∫–ª—é—á–µ–≤—ã—Ö —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–ª–∏ –∫ —Ä–µ—à–µ–Ω–∏—é.
        *   –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–≤–æ–∏—Ö –ø—Ä–∞–≤–æ–∫ **—á–µ–ª–æ–≤–µ–∫—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, `npm start`), —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ `–ì–û–¢–û–í–û`, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å –±–ª–æ–∫ ```done_summary ... ```, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º ‚Äî –±–ª–æ–∫ ```manual ... ``` —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

4.  **–§–û–ö–£–° –ò –ü–†–ê–ì–ú–ê–¢–ò–ó–ú:**
    *   –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî —Ä–µ—à–∏—Ç—å **–∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏ `–ì–û–¢–û–í–û`.
    *   **–ù–µ –∑–∞–Ω–∏–º–∞–π—Å—è –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–æ–º:** –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–π —Å—Ç–∏–ª—å –∫–æ–¥–∞, –Ω–µ –¥–µ–ª–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–π –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º–æ–π –ø—Ä–∏—á–∏–Ω–æ–π —Å–±–æ—è.

5.  **–†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:** `{', '.join(ALLOWED_COMMANDS)}`. –ö–æ–º–∞–Ω–¥—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—â–µ–Ω—ã –≤ –±–ª–æ–∫ ```manual```.

6.  **–ü–û–õ–ù–û–¢–ê –ö–û–î–ê:** **–ó–ê–ü–†–ï–©–ï–ù–û** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –º–Ω–æ–≥–æ—Ç–æ—á–∏—è (...) –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (`// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥`) –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–ª–Ω—ã–π, –≥–æ—Ç–æ–≤—ã–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–¥.
"""

def get_initial_prompt(context, task, fix_history=None):
    history_prompt_section = ""
    if fix_history:
        history_prompt_section = f"""
--- –ò–°–¢–û–†–ò–Ø –ü–†–ï–î–´–î–£–©–ï–ì–û –†–ï–®–ï–ù–ò–Ø, –ö–û–¢–û–†–û–ï –û–ö–ê–ó–ê–õ–û–°–¨ –ù–ï–í–ï–†–ù–´–ú ---
–¢—ã —É–∂–µ –ø—ã—Ç–∞–ª—Å—è —Ä–µ—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É –∏ —Å–æ–æ–±—â–∏–ª '–ì–û–¢–û–í–û', –Ω–æ —ç—Ç–æ –±—ã–ª–æ –æ—à–∏–±–∫–æ–π.
–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:
{fix_history}
--- –ö–û–ù–ï–¶ –ò–°–¢–û–†–ò–ò ---
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–≤–æ—é –ø—Ä–æ—à–ª—É—é –æ—à–∏–±–∫—É, –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.
"""
    return f"{get_command_rules()}\n{history_prompt_section}\n--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê ---\n{context}\n--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---\n–ó–∞–¥–∞—á–∞: {task}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º."


def get_review_prompt(context, goal, iteration_count, attempt_history):
    iteration_info = ""
    if iteration_count >= 4:
        iteration_info = f"""
**–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï (–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}):**
–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ.
"""
    history_info = ""
    if attempt_history:
        history_info = (
            "--- –ò–°–¢–û–†–ò–Ø –ü–†–ï–î–´–î–£–©–ò–• –ü–û–ü–´–¢–û–ö ---\n"
            "–í–æ—Ç —á—Ç–æ —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (–∏ —É—Å–ø–µ—Ö–∏, –∏ –Ω–µ—É–¥–∞—á–∏), —á—Ç–æ–±—ã –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.\n\n"
            + "\n---\n".join(f"**–ù–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}:**\n{s}" for i, s in enumerate(attempt_history)) +
            "\n\n--- –ö–û–ù–ï–¶ –ò–°–¢–û–†–ò–ò ---\n"
        )
    return f"""{get_command_rules()}
{iteration_info}
{history_info}
**–í–ê–ñ–ù–û:** –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ö–æ–¥ –Ω–∏–∂–µ ‚Äî —ç—Ç–æ **–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ** –ø—Ä–æ–µ–∫—Ç–∞.

**–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø:**
1.  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π **—Ç–µ–∫—É—â–∏–π** –∫–æ–¥, —É—á–∏—Ç—ã–≤–∞—è **–≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π**.
2.  –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –Ω–∞–ø–∏—à–∏ `–ì–û–¢–û–í–û`. –ù–µ –∏—â–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π.
3.  –ï—Å–ª–∏ —Ü–µ–ª—å –ù–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (`summary`) –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞.

--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ---
{context}
--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---

–ù–∞–ø–æ–º–∏–Ω–∞—é –ò–°–•–û–î–ù–£–Æ –¶–ï–õ–¨: {goal}
"""

def get_error_fixing_prompt(failed_command, error_message, goal, context, iteration_count, attempt_history):
    iteration_info = ""
    if iteration_count >= 4:
        iteration_info = f"""
**–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï (–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}):**
–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤, –∏ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ.
"""
    history_info = ""
    if attempt_history:
        history_info = (
            "--- –ò–°–¢–û–†–ò–Ø –ü–†–ï–î–´–î–£–©–ò–• –ü–û–ü–´–¢–û–ö ---\n"
            "–í–æ—Ç —á—Ç–æ —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (–∏ —É—Å–ø–µ—Ö–∏, –∏ –Ω–µ—É–¥–∞—á–∏), —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å.\n\n"
            + "\n---\n".join(f"**–ù–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i+1}:**\n{s}" for i, s in enumerate(attempt_history)) +
            "\n--- –ö–û–ù–ï–¶ –ò–°–¢–û–†–ò–ò ---\n"
        )

    return f"""{get_command_rules()}
{iteration_info}
{history_info}
**–í–ê–ñ–ù–û:** –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞. –ù–µ –ø–∏—à–∏ '–ì–û–¢–û–í–û'.

--- –î–ê–ù–ù–´–ï –û –¢–ï–ö–£–©–ï–ô –û–®–ò–ë–ö–ï ---
–ö–û–ú–ê–ù–î–ê: {failed_command}
–°–û–û–ë–©–ï–ù–ò–ï (stderr): {error_message}
--- –ö–û–ù–ï–¶ –î–ê–ù–ù–´–• –û–ë –û–®–ò–ë–ö–ï ---

–ò—Å—Ö–æ–¥–Ω–∞—è –¶–ï–õ–¨ –±—ã–ª–∞: {goal}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π **—Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏** –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å **–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥** –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (`summary`).

--- –ö–û–ù–¢–ï–ö–°–¢, –ì–î–ï –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê ---
{context}
--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---
"""


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def notify_user(message):
    print(f"{Colors.OKBLUE}üì¢ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message.replace(Colors.ENDC, '')}{Colors.ENDC}")
    system = platform.system()
    try:
        if system == "Darwin":
            subprocess.run(['afplay', '/System/Library/Sounds/Sosumi.aiff'], check=True, timeout=5)
        elif system == "Linux":
            subprocess.run(['zenity', '--info', '--text', message, '--title', 'Sloth Script', '--timeout=10', '--window-icon=info'], check=True, timeout=10)
            subprocess.run(['aplay', '/usr/share/sounds/alsa/Front_Center.wav'], check=True)
        elif system == "Windows":
            command = f'powershell -Command "Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show(\'{message}\', \'Sloth Script\');"'
            subprocess.run(command, shell=True, check=True, timeout=30)
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}.{Colors.ENDC}")

def get_project_context():
    print(f"{Colors.CYAN}üîÑ –õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}")
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        script_to_run_path = os.path.join(script_dir, CONTEXT_SCRIPT)
        context_file_path = os.path.join(script_dir, CONTEXT_FILE)

        if os.path.exists(context_file_path): os.remove(context_file_path)

        subprocess.run(['python3', script_to_run_path], check=True, capture_output=True, text=True, encoding='utf-8')

        with open(context_file_path, 'r', encoding='utf-8') as f:
            context_data = f.read()

        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –†–∞–∑–º–µ—Ä: {len(context_data)} —Å–∏–º–≤–æ–ª–æ–≤.{Colors.ENDC}")
        return context_data
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}{Colors.ENDC}")
        return None

def extract_todo_block(text):
    match = re.search(r"```bash\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_summary_block(text):
    match = re.search(r"```summary\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_manual_steps_block(text):
    match = re.search(r"```manual\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_done_summary_block(text):
    match = re.search(r"```done_summary\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def get_file_hash(filepath):
    if not os.path.exists(filepath) or os.path.isdir(filepath): return None
    h = hashlib.sha256()
    with open(filepath, 'rb') as f:
        while True:
            chunk = f.read(8192)
            if not chunk: break
            h.update(chunk)
    return h.hexdigest()

def apply_shell_commands(commands_str):
    print(f"{Colors.OKBLUE}  [–î–µ—Ç–∞–ª–∏] –í—Ö–æ–¥ –≤ apply_shell_commands().{Colors.ENDC}")

    filepaths = re.findall(r'[\w\/\-\.]+\.[\w]+', commands_str)
    hashes_before = {fp: get_file_hash(fp) for fp in filepaths if os.path.exists(fp) and not os.path.isdir(fp)}

    try:
        is_macos = platform.system() == "Darwin"
        commands_str_adapted = re.sub(r"sed -i ", "sed -i '.bak' ", commands_str) if is_macos else commands_str

        full_command = f"set -e\n{commands_str_adapted}"

        print(f"{Colors.WARNING}‚ö°Ô∏è –õ–û–ì: –í—ã–ø–æ–ª–Ω—è—é –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥ (—Å set -e):\n---\n{full_command}\n---{Colors.ENDC}")
        result = subprocess.run(['bash', '-c', full_command], capture_output=True, text=True, encoding='utf-8')

        if result.returncode != 0:
            error_msg = f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞ ({result.returncode}).\n–û—à–∏–±–∫–∞ (STDERR): {result.stderr.strip()}"
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–∞ –∫–æ–º–∞–Ω–¥.\n{error_msg}{Colors.ENDC}")
            return False, commands_str, result.stderr.strip() or "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ stderr."

        if result.stderr:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (STDERR –æ—Ç —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã):\n{result.stderr.strip()}{Colors.ENDC}")

        if is_macos: subprocess.run("find . -name '*.bak' -delete", shell=True, check=True)

        hashes_after = {fp: get_file_hash(fp) for fp in hashes_before.keys()}

        if hashes_before and all(hashes_before.get(fp) == hashes_after.get(fp) for fp in hashes_before):
            error_msg = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤. –í–µ—Ä–æ—è—Ç–Ω–æ, —à–∞–±–ª–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ sed) –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ–≤–µ—Ä–µ–Ω."
            final_error_message = result.stderr.strip() if result.stderr else error_msg
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –û–®–ò–ë–ö–ê –õ–û–ì–ò–ö–ò: {error_msg}{Colors.ENDC}")
            if result.stderr: print(f"–ü—Ä–∏—á–∏–Ω–∞ –∏–∑ STDERR: {final_error_message}")
            return False, commands_str, final_error_message

        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ë–ª–æ–∫ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –∏–∑–º–µ–Ω–∏–ª —Ñ–∞–π–ª—ã.{Colors.ENDC}")
        return True, None, None
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –û–®–ò–ë–ö–ê –≤ apply_shell_commands: {e}{Colors.ENDC}")
        return False, commands_str, str(e)

def extract_filepath_from_command(command):
    parts = command.split()
    for part in reversed(parts):
        if part in ['-c', '-e', '<<']: continue
        clean_part = part.strip("'\"")
        if ('/' in clean_part or '.' in clean_part) and os.path.exists(clean_part):
            return clean_part
    return None

def save_prompt_for_debugging(prompt_text):
    try:
        with open("sloth_debug_prompt.txt", "w", encoding='utf-8') as f:
            f.write(prompt_text)
        print(f"{Colors.OKBLUE}   - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'sloth_debug_prompt.txt'.{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.WARNING}   - –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞: {e}{Colors.ENDC}")

def send_request_to_model(prompt_text, iteration_count):
    global model, GOOGLE_AI_HAS_FAILED_THIS_SESSION
    try:
        prompt_size = len(prompt_text)
        print(f"{Colors.CYAN}üß† –õ–û–ì: [–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count}] –ì–æ—Ç–æ–≤–ª—é –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å ({ACTIVE_API_SERVICE}).{Colors.ENDC}")
        print(f"{Colors.OKBLUE}   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {prompt_size} —Å–∏–º–≤–æ–ª–æ–≤.{Colors.ENDC}")
        save_prompt_for_debugging(prompt_text)

        if prompt_size > 100000:
             print(f"{Colors.WARNING}   - –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π. –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.{Colors.ENDC}")

        request_options = {"timeout": API_TIMEOUT_SECONDS}
        print(f"{Colors.CYAN}‚è≥ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç... (—Ç–∞–π–º–∞—É—Ç: {API_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥){Colors.ENDC}")
        response = model.generate_content(prompt_text, request_options=request_options)
        
        if response.prompt_feedback and response.prompt_feedback.block_reason:
            reason_name = response.prompt_feedback.block_reason.name
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ó–ê–ü–†–û–° –ë–´–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù API.{Colors.ENDC}")
            print(f"{Colors.FAIL}   - –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {reason_name}{Colors.ENDC}")
            print(f"{Colors.FAIL}   - –†–µ–π—Ç–∏–Ω–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {response.prompt_feedback.safety_ratings}{Colors.ENDC}")
            raise ValueError(f"–ü—Ä–æ–º–ø—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–∏—á–∏–Ω–∞: {reason_name}")

        if not response.candidates or response.candidates[0].finish_reason.name != "STOP":
            reason = response.candidates[0].finish_reason.name if response.candidates else "–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
            safety_ratings = response.candidates[0].safety_ratings if response.candidates else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π.{Colors.ENDC}")
            print(f"{Colors.FAIL}   - –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {reason}{Colors.ENDC}")
            print(f"{Colors.FAIL}   - –†–µ–π—Ç–∏–Ω–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: {safety_ratings}{Colors.ENDC}")
            raise ValueError(f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.{Colors.ENDC}")
        return response.text
        
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({ACTIVE_API_SERVICE}): {e}{Colors.ENDC}")
        
        error_str = str(e).lower()
        is_quota_error = "quota" in error_str or "rate limit" in error_str or "exceeded" in error_str

        if ACTIVE_API_SERVICE == "Google AI (API Key)" and is_quota_error:
            print(f"{Colors.FAIL}üö® –õ–û–ì: –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê –ö–í–û–¢–´ –í GOOGLE AI API!{Colors.ENDC}")
            print(f"{Colors.CYAN}   - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–ª–∞–≥ –æ—Ç–∫–∞–∑–∞ –∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ (–Ω–∞ —ç—Ç—É —Å–µ—Å—Å–∏—é) –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Vertex AI...{Colors.ENDC}")
            GOOGLE_AI_HAS_FAILED_THIS_SESSION = True
            model = None
            initialize_model()
        
        print(f"{Colors.CYAN}   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª 'sloth_debug_prompt.txt', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É.{Colors.ENDC}")
        return None

def _read_multiline_input(prompt):
    print(prompt)
    lines = []
    empty_line_count = 0
    while empty_line_count < 3:
        try:
            line = input()
            if line:
                lines.append(line)
                empty_line_count = 0
            else:
                empty_line_count += 1
        except EOFError:
            break
    return '\n'.join(lines).strip()

def get_user_input():
    goal_prompt = (
        f"{Colors.HEADER}{Colors.BOLD}üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å.{Colors.ENDC}\n"
        f"{Colors.CYAN}üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–µ–Ω –∏ –¥–µ—Ç–∞–ª–µ–Ω. "
        f"–ß–µ–º –ª—É—á—à–µ —Ç—ã –æ–ø–∏—à–µ—à—å –ø—Ä–æ–±–ª–µ–º—É –∏ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —è —Å–º–æ–≥—É –ø–æ–º–æ—á—å.\n"
        f"(–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞, –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥){Colors.ENDC}"
    )
    user_goal = _read_multiline_input(goal_prompt)

    if not user_goal:
        return None, None

    log_prompt = f"\n{Colors.HEADER}{Colors.BOLD}üëç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏, –≤—Å—Ç–∞–≤—å –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞.{Colors.ENDC}"
    error_log = _read_multiline_input(log_prompt)

    return user_goal, error_log

def save_completion_history(goal, summary):
    history_data = {"previous_attempts": []}
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history_data = json.load(f)
        except json.JSONDecodeError:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {HISTORY_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.{Colors.ENDC}")

    new_entry = {
        "initial_goal": goal,
        "solution_summary": summary
    }
    history_data.get("previous_attempts", []).insert(0, new_entry)

    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history_data, f, indent=2, ensure_ascii=False)
        print(f"{Colors.OKGREEN}üíæ –õ–û–ì: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {HISTORY_FILE}.{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è: {e}{Colors.ENDC}")

def load_fix_history():
    if not os.path.exists(HISTORY_FILE):
        return None
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            history_data = json.load(f)
        
        attempts = history_data.get("previous_attempts", [])
        if not attempts:
            return None
        
        last_attempt = attempts[0]
        
        text_history = (
            f"–≠—Ç–æ —Ç–≤–æ—è —Å–∞–º–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π:\n"
            f"  - –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {last_attempt.get('initial_goal', 'N/A')}\n"
            f"  - –¢–≤–æ–µ '—Ä–µ—à–µ–Ω–∏–µ': {last_attempt.get('solution_summary', 'N/A')}"
        )
        return text_history
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {HISTORY_FILE}: {e}{Colors.ENDC}")
        return None


# --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ---
def main(is_fix_mode=False):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª —Å–∫—Ä–∏–ø—Ç–∞."""
    if is_fix_mode:
        print(f"{Colors.WARNING}üîß –õ–û–ì: –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (--fix).{Colors.ENDC}")

    user_goal, error_log = get_user_input()

    if not user_goal:
        raise ValueError("–¶–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")

    initial_task = user_goal
    if error_log:
        initial_task += "\n\n--- –õ–û–ì –û–®–ò–ë–ö–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ---\n" + error_log

    project_context = get_project_context()
    if not project_context: raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞.")
    
    fix_history_content = None
    if is_fix_mode:
        fix_history_content = load_fix_history()
        if fix_history_content:
            print(f"{Colors.CYAN} historial –õ–û–ì: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.{Colors.ENDC}")

    current_prompt = get_initial_prompt(project_context, initial_task, fix_history=fix_history_content)
    attempt_history = []

    for iteration_count in range(1, MAX_ITERATIONS + 1):
        print(f"\n{Colors.BOLD}{Colors.HEADER}üöÄ --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}/{MAX_ITERATIONS} (API: {ACTIVE_API_SERVICE}) ---{Colors.ENDC}")

        answer = send_request_to_model(current_prompt, iteration_count)
        if not answer:
            if model:
                print(f"{Colors.CYAN}üîÑ –õ–û–ì: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞ –Ω–∞ —Ç–æ–π –∂–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º API...{Colors.ENDC}")
                continue
            else:
                return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π API."
        
        if answer.strip().upper().startswith("–ì–û–¢–û–í–û"):
            done_summary = extract_done_summary_block(answer)
            manual_steps = extract_manual_steps_block(answer)

            if not done_summary:
                print(f"{Colors.WARNING}‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–∏–ª–∞ '–ì–û–¢–û–í–û', –Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –±–ª–æ–∫ `done_summary`. –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.{Colors.ENDC}")
                done_summary = "–ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ."
            else:
                print(f"{Colors.OKGREEN}üìÑ –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï –û–¢ –ú–û–î–ï–õ–ò:\n{Colors.CYAN}{done_summary}{Colors.ENDC}")
                if is_fix_mode and os.path.exists(HISTORY_FILE):
                    os.remove(HISTORY_FILE)
                    print(f"{Colors.CYAN}üóëÔ∏è  –õ–û–ì: –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ --fix. –°—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è ({HISTORY_FILE}) –æ—á–∏—â–µ–Ω–∞.{Colors.ENDC}")
                save_completion_history(user_goal, done_summary)


            final_message = f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–∑–∞ {iteration_count} –∏—Ç–µ—Ä–∞—Ü–∏–π){Colors.ENDC}"
            if manual_steps:
                final_message += f"\n\n{Colors.WARNING}‚úã –í–ê–ñ–ù–û: –¢—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ä—É—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:{Colors.ENDC}\n" + "-"*20 + f"\n{manual_steps}\n" + "-"*20
            return final_message

        commands_to_run = extract_todo_block(answer)
        if not commands_to_run:
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥ –∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ '–ì–û–¢–û–í–û'. –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{answer}{Colors.ENDC}")
            with open("sloth_debug_bad_response.txt", "w", encoding='utf-8') as f:
                f.write(answer)
            return f"{Colors.FAIL}–ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π. –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ sloth_debug_bad_response.txt{Colors.ENDC}"


        strategy_description = extract_summary_block(answer)
        if not strategy_description:
            strategy_description = f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å `{commands_to_run.splitlines()[0][:80]}...` (–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)"
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –±–ª–æ–∫ summary. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ-–æ–ø–∏—Å–∞–Ω–∏–µ.{Colors.ENDC}")
        else:
             print(f"{Colors.CYAN}üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: '{strategy_description}'{Colors.ENDC}")

        print(f"\n{Colors.OKBLUE}üîß –ù–∞–π–¥–µ–Ω—ã shell-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:{Colors.ENDC}\n" + "-"*20 + f"\n{commands_to_run}\n" + "-"*20)

        success, failed_command, error_message = apply_shell_commands(commands_to_run)

        project_context = get_project_context()
        if not project_context: return f"{Colors.FAIL}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.{Colors.ENDC}"

        if success:
            history_entry = (
                f"**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy_description}\n"
                f"  **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£–°–ü–ï–•"
            )
            attempt_history.append(history_entry)
            print(f"\n{Colors.CYAN}üßê –õ–û–ì: –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.{Colors.ENDC}")
            current_prompt = get_review_prompt(project_context, user_goal, iteration_count + 1, attempt_history)
        else:
            history_entry = (
                f"**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy_description}\n"
                f"  **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–†–û–í–ê–õ\n"
                f"  **–û—à–∏–±–∫–∞ (stderr):** {error_message}"
            )
            attempt_history.append(history_entry)

            print(f"\n{Colors.FAIL}üÜò –õ–û–ì: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞. –ì–æ—Ç–æ–≤–ª—é –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.{Colors.ENDC}")

            filepath = extract_filepath_from_command(failed_command or "")
            error_context = f"--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê ---\n{project_context}\n--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---"
            if filepath and os.path.exists(filepath) and not os.path.isdir(filepath):
                try:
                    with open(filepath, 'r', encoding='utf-8') as f: file_content = f.read()
                    error_context = f"--- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê: {filepath} ---\n{file_content}\n--- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û –§–ê–ô–õ–ê ---\n\n{error_context}"
                except Exception as e:
                    print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª '{filepath}' –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏: {e}{Colors.ENDC}")

            current_prompt = get_error_fixing_prompt(
                failed_command=failed_command, error_message=error_message,
                goal=user_goal, context=error_context, iteration_count=iteration_count + 1, attempt_history=attempt_history)

    return f"{Colors.WARNING}‚åõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_ITERATIONS} –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{Colors.ENDC}"

if __name__ == "__main__":
    is_fix_mode = '--fix' in sys.argv or '-fix' in sys.argv

    if not is_fix_mode and os.path.exists(HISTORY_FILE):
        try:
            os.remove(HISTORY_FILE)
            print(f"{Colors.CYAN}üóëÔ∏è  –õ–û–ì: –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∏—Å—Ç–æ—Ä–∏—è ({HISTORY_FILE}).{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏: {e}{Colors.ENDC}")
    
    if os.path.exists("sloth_debug_prompt.txt"):
        os.remove("sloth_debug_prompt.txt")
    if os.path.exists("sloth_debug_bad_response.txt"):
        os.remove("sloth_debug_bad_response.txt")


    initialize_model()
    final_status = "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    try:
        if model:
            final_status = main(is_fix_mode)
        else:
            final_status = f"{Colors.FAIL}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.{Colors.ENDC}"
    except KeyboardInterrupt:
        final_status = f"{Colors.OKBLUE}üîµ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.ENDC}"
    except Exception as e:
        import traceback
        traceback.print_exc()
        final_status = f"{Colors.FAIL}‚ùå –°–∫—Ä–∏–ø—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}{Colors.ENDC}"
    finally:
        print(f"\n{final_status}")
        notify_user(final_status)
        time.sleep(1)
        print(f"\n{Colors.BOLD}üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.ENDC}")