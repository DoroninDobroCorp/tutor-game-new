# -*- coding: utf-8 -*-

import google.generativeai as genai
import os
import subprocess
import time
import re
import platform # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
API_KEY = 'AIzaSyBlW_LcWYEYivEhPo7Q7Lc_vmNu-wtI-wM'
CONTEXT_SCRIPT = 'AskGpt.py'
CONTEXT_FILE = 'message_1.txt'
MODEL_NAME = "gemini-2.5-pro"

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ---
print(f"–õ–û–ì: –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
try:
    genai.configure(api_key=API_KEY)
    print("–õ–û–ì: API —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
except Exception as e:
    print(f"–õ–û–ì: –û–®–ò–ë–ö–ê –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API: {e}")
    exit()

generation_config = {
    "temperature": 0.7, # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –º–æ–¥–µ–ª—å –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 8192, # –ö–æ–º–∞–Ω–¥—ã sed –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏
}
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]
model = genai.GenerativeModel(model_name=MODEL_NAME,
                              generation_config=generation_config,
                              safety_settings=safety_settings)
print(f"–õ–û–ì: –ú–æ–¥–µ–ª—å '{MODEL_NAME}' —Å–æ–∑–¥–∞–Ω–∞.")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_project_context():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞, –∑–∞–ø—É—Å–∫–∞—è –≤–Ω–µ—à–Ω–∏–π —Å–∫—Ä–∏–ø—Ç."""
    print("–õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...")
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        script_to_run_path = os.path.join(script_dir, CONTEXT_SCRIPT)
        context_file_path = os.path.join(script_dir, CONTEXT_FILE)

        if os.path.exists(context_file_path):
            os.remove(context_file_path)
        
        subprocess.run(['python3', script_to_run_path], check=True, capture_output=True, text=True, encoding='utf-8')
        
        with open(context_file_path, 'r', encoding='utf-8') as f:
            context_data = f.read()
        print("–õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return context_data
    except Exception as e:
        print(f"–õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}")
        return None

def extract_todo_block(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É TODO START –∏ TODO FINISH."""
    match = re.search(r"TODO START\s*(.*?)\s*TODO FINISH", text, re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

def apply_sed_commands(sed_commands):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ sed."""
    print("–õ–û–ì: –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é apply_sed_commands().")
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è sed –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (macOS/BSD vs Linux/GNU)
        is_macos = platform.system() == "Darwin"
        
        commands = sed_commands.strip().split('\n')
        for command in commands:
            command = command.strip()
            if not command.startswith("sed"):
                continue

            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è macOS, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è backup-—Ñ–∞–π–ª–∞ —Å —Ñ–ª–∞–≥–æ–º -i
            if is_macos:
                command = command.replace("sed -i ", "sed -i '.bak' ")
            
            print(f"–õ–û–ì: –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–±–æ–ª–æ—á–∫–µ. `shell=True` –∑–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            if result.stderr:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: STDERR –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command}': {result.stderr}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –Ω–∞ macOS
        if is_macos:
            print("–õ–û–ì: –û—á–∏—â–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ .bak —Ñ–∞–π–ª—ã –Ω–∞ macOS...")
            cleanup_command = f"find . -name '*.bak' -delete"
            subprocess.run(cleanup_command, shell=True)

        print("–õ–û–ì: –í—Å–µ –∫–æ–º–∞–Ω–¥—ã sed —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"–õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã sed: '{e.cmd}'")
        print(f"–õ–û–ì: STDOUT: {e.stdout}")
        print(f"–õ–û–ì: STDERR: {e.stderr}")
        return False
    except Exception as e:
        print(f"–õ–û–ì: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –û–®–ò–ë–ö–ê –≤ apply_sed_commands: {e}")
        return False

# --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    print("–õ–û–ì: –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é main().")
    initial_task = input("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–µ! –û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –≤—Å—Ç–∞–≤—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n> ")
    if not initial_task:
        print("–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í—ã—Ö–æ–¥.")
        return

    project_context = get_project_context()
    if not project_context: return

    prompt_template = """
–¢—ã ‚Äî AI-–∏–Ω–∂–µ–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Ç–∏–ª–∏—Ç—É `sed` –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –≤ –∫–æ–¥.
–í–æ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:
--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê ---
{context}
--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---

–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –∫–æ–¥. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ `sed` –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

–í–ê–ñ–ù–û:
1.  –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥—ã `sed` –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ TODO START / TODO FINISH.
2.  –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `sed -i 's/–ß–¢–û_–ò–°–ö–ê–¢–¨/–ù–ê_–ß–¢–û_–ó–ê–ú–ï–ù–ò–¢–¨/g' –ü–£–¢–¨/–ö/–§–ê–ô–õ–£`.
3.  –ó–∞–º–µ–Ω—è–π —Ü–µ–ª—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
4.  –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∑–∞–º–µ–Ω—ã –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã `/`, `&` –∏–ª–∏ `\`, –∏—Ö –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª—ç—à–µ–º (`\\`).
5.  –ù–µ —Å—Ç—Ä–µ–º–∏—Å—å –∫ –∏–¥–µ–∞–ª—É, —Ä–µ—à–∞–π —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É.

–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞, –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: "–ì–û–¢–û–í–û".
"""
    review_prompt_template = """
–Ø –≤—ã–ø–æ–ª–Ω–∏–ª —Ç–≤–æ–∏ `sed` –∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞:
--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ---
{context}
--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---

–ù–∞–ø–æ–º–∏–Ω–∞—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É: {task}

–ü—Ä–æ–≤–µ—Ä—å –µ—â–µ —Ä–∞–∑. –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞?
- –ï—Å–ª–∏ –¥–∞, –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ "–ì–û–¢–û–í–û".
- –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ù–û–í–´–ô –Ω–∞–±–æ—Ä `sed` –∫–æ–º–∞–Ω–¥ –≤ –±–ª–æ–∫–µ TODO –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

    current_prompt = prompt_template.format(context=project_context, task=initial_task)

    for iteration_count in range(1, 11):
        print(f"\n--- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count} ---")
        
        try:
            print("–õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å...")
            response = model.generate_content(current_prompt, request_options={'timeout': 600})
            answer = response.text
        except Exception as e:
            print(f"–õ–û–ì: –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}"); break
        
        print("\n–ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:\n" + "="*20 + f"\n{answer}\n" + "="*20)

        if "–ì–û–¢–û–í–û" in answer.upper():
            print("\nüéâ –ú–û–î–ï–õ–¨ –°–ß–ò–¢–ê–ï–¢, –ß–¢–û –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê! üéâ"); break

        sed_commands = extract_todo_block(answer)
        if not sed_commands:
            print("\n–ú–û–î–ï–õ–¨ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –±–ª–æ–∫ TODO. –†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."); break
            
        print("\n–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ `sed` –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:\n" + "-"*20 + f"\n{sed_commands}\n" + "-"*20)
        
        if not apply_sed_commands(sed_commands):
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å `sed` –∫–æ–º–∞–Ω–¥—ã. –†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."); break
        
        print("\n–õ–û–ì: –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
        time.sleep(2)
        
        project_context = get_project_context()
        if not project_context: print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç. –†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."); break

        current_prompt = review_prompt_template.format(context=project_context, task=initial_task)
    else:
        print("\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


if __name__ == "__main__":
    main()
    print("\n–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")