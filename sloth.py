# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞.
–°–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª—å –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏,
–∞ –∑–∞—Ç–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥–µ–ª—å—é Gemini –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.
"""
import vertexai
from vertexai.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold
import os
import subprocess
import time
import re
import platform
import sys

# --- –ö–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏ ---
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    CYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
GOOGLE_CLOUD_PROJECT = "useful-gearbox-464618-v3"
GOOGLE_CLOUD_LOCATION = "us-central1"
MODEL_NAME = "gemini-2.5-pro" 

CONTEXT_SCRIPT = 'AskGpt.py'
CONTEXT_FILE = 'message_1.txt'
ALLOWED_COMMANDS = (
    "sed", "rm", "mv", "touch", "mkdir", "npm", "npx", "yarn", "pnpm", "git", "echo", "./", "cat"
)
MAX_ITERATIONS = 15
API_TIMEOUT_SECONDS = 600 # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤—ã–∑–æ–≤–µ API, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ---
print(f"{Colors.CYAN}‚öôÔ∏è  –õ–û–ì: –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ú–æ–¥–µ–ª—å: {MODEL_NAME}{Colors.ENDC}")
try:
    vertexai.init(project=GOOGLE_CLOUD_PROJECT, location=GOOGLE_CLOUD_LOCATION)
    print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: Vertex AI SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{GOOGLE_CLOUD_PROJECT}'.{Colors.ENDC}")
except Exception as e:
    print(f"{Colors.FAIL}‚ùå –õ–û–ì: –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vertex AI SDK: {e}{Colors.ENDC}")
    print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–û–î–°–ö–ê–ó–ö–ê: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: gcloud auth application-default login{Colors.ENDC}")
    sys.exit(1)

generation_config = {
    "temperature": 1, "top_p": 1, "top_k": 1, "max_output_tokens": 32768
}
safety_settings = {
    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
}

model = GenerativeModel(
    model_name=MODEL_NAME,
    generation_config=generation_config,
    safety_settings=safety_settings
)
print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ú–æ–¥–µ–ª—å '{MODEL_NAME}' —Å–æ–∑–¥–∞–Ω–∞.{Colors.ENDC}")


# --- –ë–õ–û–ö –ü–†–û–ú–ü–¢-–®–ê–ë–õ–û–ù–û–í ---

def get_command_rules():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –º–æ–¥–µ–ª–∏."""
    return f"""
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å shell-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

**–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê:**

1.  **–°–¢–†–ê–¢–ï–ì–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô:**
    *   **–¢–æ—á–µ—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ:** –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `sed` –¥–ª—è —Ç–æ—á–µ—á–Ω—ã—Ö –∑–∞–º–µ–Ω, –≤—Å—Ç–∞–≤–æ–∫ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–π —Å—Ç—Ä–æ–∫. –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.
    *   **–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å:** –ï—Å–ª–∏ —Ç–æ—á–µ—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `cat <<'EOF' > path/to/file.txt ... EOF` –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏. **–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—É–¥—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.**
    *   **–ó–ê–©–ò–¢–ê –û–¢ –ü–û–¢–ï–†–ò –î–ê–ù–ù–´–• (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!):** –ï—Å–ª–∏ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç **–±–æ–ª–µ–µ 150 —Å—Ç—Ä–æ–∫**, —Ç–µ–±–µ **–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û** –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º —á–µ—Ä–µ–∑ `cat <<'EOF' > ...`. –î–ª—è —Ç–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç—ã **–û–ë–Ø–ó–ê–ù** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—á–µ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (`sed`) –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫. –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö.

2.  **–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê ‚Äî –≠–¢–û –ó–ê–ö–û–ù:**
    *   **–î–µ–π—Å—Ç–≤–∏—è:** –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å **—Ç–æ–ª—å–∫–æ** –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ ```bash ... ```. –ù–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–Ω–µ –±–ª–æ–∫–∞.
    *   **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:**
        *   –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞ –∏ **–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞**, –Ω–∞–ø–∏—à–∏ **—Ç–æ–ª—å–∫–æ** –æ–¥–Ω–æ —Å–ª–æ–≤–æ: `–ì–û–¢–û–í–û`.
        *   –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–≤–æ–∏—Ö –ø—Ä–∞–≤–æ–∫ **—á–µ–ª–æ–≤–µ–∫—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, `npx`, `prisma`), —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ `–ì–û–¢–û–í–û`, –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å –±–ª–æ–∫ ```manual ... ``` —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

    **–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å —Ä—É—á–Ω—ã–º–∏ —à–∞–≥–∞–º–∏:**
    ```
    –ì–û–¢–û–í–û

    ```manual
    # –Ø –≤–Ω–µ—Å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–¥.
    # –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É:
    npx prisma generate
    npx prisma db push
    ```
    ```

3.  **–§–û–ö–£–° –ù–ê –ó–ê–î–ê–ß–ï:** –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–π **—Ü–µ–ª–∏**. –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ä–µ—à–µ–Ω—ã –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö. –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.

4.  **–†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:** `{', '.join(ALLOWED_COMMANDS)}`. –ö–æ–º–∞–Ω–¥—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—â–µ–Ω—ã –≤ –±–ª–æ–∫ ```manual```.

5.  **–°–û–•–†–ê–ù–Ø–ô –ö–û–ù–¢–ï–ö–°–¢:** **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!** –ù–µ –≤–Ω–æ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ. –ù–µ –∏—Å–ø—Ä–∞–≤–ª—è–π —Å—Ç–∏–ª—å, –Ω–µ –¥–µ–ª–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–µ –º–µ–Ω—è–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–æ–π –∏—Å—Ö–æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏ –∏–ª–∏ —á–∞—Å—Ç—å—é —Ü–µ–ª–∏. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –º–µ—à–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏.
"""

def get_initial_prompt(context, task):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º –ª–æ–≥–æ–º –æ—à–∏–±–∫–∏)."""
    return f"{get_command_rules()}\n--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê ---\n{context}\n--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---\n–ó–∞–¥–∞—á–∞: {task}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º."

def get_review_prompt(context, goal):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. **–í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—É—é —Ü–µ–ª—å, –±–µ–∑ –ª–æ–≥–æ–≤.**
    """
    return f"""{get_command_rules()}
**–í–ê–ñ–ù–û:** –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ö–æ–¥ –Ω–∏–∂–µ ‚Äî —ç—Ç–æ **–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ** –ø—Ä–æ–µ–∫—Ç–∞. –õ–æ–≥ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª –≤ –Ω–∞—á–∞–ª–µ, **–ë–û–õ–¨–®–ï –ù–ï –ê–ö–¢–£–ê–õ–ï–ù**.

**–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø:**
1.  –ó–∞–±—É–¥—å –ø—Ä–æ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π **—Ç–µ–∫—É—â–∏–π** –∫–æ–¥.
2.  –°—Ä–∞–≤–Ω–∏ –µ–≥–æ —Å **–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–ª—å—é**.
3.  –ï—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç `–ì–û–¢–û–í–û` (—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º `manual`).
4.  –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ---
{context}
--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---

–ù–∞–ø–æ–º–∏–Ω–∞—é –ò–°–•–û–î–ù–£–Æ –¶–ï–õ–¨: {goal}
"""

def get_error_fixing_prompt(failed_command, error_message, goal, context):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    return f"""{get_command_rules()}
**–í–ê–ñ–ù–û:** –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ù–µ –ø–∏—à–∏ '–ì–û–¢–û–í–û'.

--- –î–ê–ù–ù–´–ï –û–ë –û–®–ò–ë–ö–ï ---
–ö–û–ú–ê–ù–î–ê: {failed_command}
–°–û–û–ë–©–ï–ù–ò–ï: {error_message}
--- –ö–û–ù–ï–¶ –î–ê–ù–ù–´–• –û–ë –û–®–ò–ë–ö–ï ---

–ò—Å—Ö–æ–¥–Ω–∞—è –¶–ï–õ–¨ –±—ã–ª–∞: {goal}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å **–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥**.

--- –ö–û–ù–¢–ï–ö–°–¢, –ì–î–ï –ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê ---
{context}
--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---
"""


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def notify_user(message):
    print(f"{Colors.OKBLUE}üì¢ –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message.replace(Colors.ENDC, '')}{Colors.ENDC}")
    system = platform.system()
    try:
        if system == "Darwin":
            subprocess.run(['afplay', '/System/Library/Sounds/Sosumi.aiff'], check=True, timeout=5)
        elif system == "Linux":
            # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞ Ubuntu
            subprocess.run(['zenity', '--info', '--text', message, '--title', 'Sloth Script', '--timeout=10', '--window-icon=info'], check=True, timeout=10)
            # –ó–≤—É–∫ —á–µ—Ä–µ–∑ aplay (–∏–ª–∏ –¥—Ä—É–≥–æ–π –∞—É–¥–∏–æ–ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å)
            subprocess.run(['aplay', '/usr/share/sounds/alsa/Front_Center.wav'], check=True)
        elif system == "Windows":
            # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞ Windows
            command = f'powershell -Command "Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show(\'{message}\', \'Sloth Script\');"'
            subprocess.run(command, shell=True, check=True, timeout=30)
    except Exception as e:
        print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}.{Colors.ENDC}")

def get_project_context():
    print(f"{Colors.CYAN}üîÑ –õ–û–ì: –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}")
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        script_to_run_path = os.path.join(script_dir, CONTEXT_SCRIPT)
        context_file_path = os.path.join(script_dir, CONTEXT_FILE)

        if os.path.exists(context_file_path): os.remove(context_file_path)

        subprocess.run(['python3', script_to_run_path], check=True, capture_output=True, text=True, encoding='utf-8')
        
        with open(context_file_path, 'r', encoding='utf-8') as f:
            context_data = f.read()

        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –†–∞–∑–º–µ—Ä: {len(context_data)} —Å–∏–º–≤–æ–ª–æ–≤.{Colors.ENDC}")
        return context_data
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ get_project_context: {e}{Colors.ENDC}")
        return None

def extract_todo_block(text):
    match = re.search(r"```bash\s*(.*?)\s*```", text, re.DOTALL)
    if match: return match.group(1).strip()
    return None

def extract_manual_steps_block(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    match = re.search(r"```manual\s*(.*?)\s*```", text, re.DOTALL)
    if match:
        return match.group(1).strip()
    return None

def apply_shell_commands(commands_str):
    print(f"{Colors.OKBLUE}  [–î–µ—Ç–∞–ª–∏] –í—Ö–æ–¥ –≤ apply_shell_commands().{Colors.ENDC}")
    try:
        is_macos = platform.system() == "Darwin"
        commands_str_adapted = re.sub(r"sed -i ", "sed -i '.bak' ", commands_str) if is_macos else commands_str
            
        print(f"{Colors.WARNING}‚ö°Ô∏è –õ–û–ì: –í—ã–ø–æ–ª–Ω—è—é –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥:\n---\n{commands_str_adapted}\n---{Colors.ENDC}")
        result = subprocess.run(['bash', '-c', commands_str_adapted], check=True, capture_output=True, text=True, encoding='utf-8')

        if result.stdout: print(f"STDOUT:\n{result.stdout.strip()}")
        if result.stderr: print(f"{Colors.WARNING}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (STDERR):\n{result.stderr.strip()}{Colors.ENDC}")
        
        if is_macos: subprocess.run("find . -name '*.bak' -delete", shell=True, check=True)

        print(f"{Colors.OKGREEN}‚úÖ –õ–û–ì: –ë–ª–æ–∫ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.{Colors.ENDC}")
        return True, None, None
    except subprocess.CalledProcessError as e:
        error_msg = f"–ö–æ–º–∞–Ω–¥–∞: 'bash -c \"...\"'\n–û—à–∏–±–∫–∞: {e.stderr.strip()}"
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–∞ –∫–æ–º–∞–Ω–¥.\n{error_msg}{Colors.ENDC}")
        return False, commands_str, e.stderr.strip()
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –û–®–ò–ë–ö–ê –≤ apply_shell_commands: {e}{Colors.ENDC}")
        return False, commands_str, str(e)


def extract_filepath_from_command(command):
    parts = command.split()
    for part in reversed(parts):
        if part in ['-c', '-e', '<<']: continue
        clean_part = part.strip("'\"")
        if ('/' in clean_part or '.' in clean_part) and os.path.exists(clean_part):
            return clean_part
    return None

def send_request_to_model(prompt_text):
    try:
        print(f"{Colors.CYAN}üß† –õ–û–ì: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å... –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: ~{len(prompt_text)} —Å–∏–º–≤–æ–ª–æ–≤.{Colors.ENDC}")
        prompt_preview = re.sub(r'--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê.*---(.|\n|\r)*--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---', '--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê (—Å–∫—Ä—ã—Ç) ---', prompt_text, flags=re.DOTALL)
        prompt_preview = re.sub(r'--- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê.*---(.|\n|\r)*--- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û –§–ê–ô–õ–ê ---', '--- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê (—Å–∫—Ä—ã—Ç–æ) ---', prompt_preview, flags=re.DOTALL)
        print(f"{Colors.OKBLUE}  [–î–µ—Ç–∞–ª–∏] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:\n---\n{prompt_preview}\n---{Colors.ENDC}")
        
        ### –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –£–¥–∞–ª–µ–Ω–∏–µ request_options –∏–∑ –≤—ã–∑–æ–≤–∞ ###
        # API Vertex AI –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –≤ `generate_content`.
        response = model.generate_content(prompt_text)
        ### –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 1 ###

        if not response.candidates or response.candidates[0].finish_reason.name != "STOP":
            reason = response.candidates[0].finish_reason.name if response.candidates else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            print(f"{Colors.FAIL}‚ùå –õ–û–ì: –û–®–ò–ë–ö–ê: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}{Colors.ENDC}")
            return None
        return response.text
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –õ–û–ì: –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}{Colors.ENDC}")
        return None

def _read_multiline_input(prompt):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ 3-—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫."""
    print(prompt)
    lines = []
    empty_line_count = 0
    while empty_line_count < 3:
        try:
            line = input()
            if line:
                lines.append(line)
                empty_line_count = 0
            else:
                empty_line_count += 1
        except EOFError:
            break
    return '\n'.join(lines).strip()

def get_user_input():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ —Ü–µ–ª–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞ –æ—à–∏–±–∫–∏."""
    goal_prompt = f"{Colors.HEADER}{Colors.BOLD}üëã –ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å. (–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞, –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥){Colors.ENDC}"
    user_goal = _read_multiline_input(goal_prompt)

    if not user_goal:
        return None, None

    log_prompt = f"\n{Colors.HEADER}{Colors.BOLD}üëç –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏, –≤—Å—Ç–∞–≤—å –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ Enter 3 —Ä–∞–∑–∞.{Colors.ENDC}"
    error_log = _read_multiline_input(log_prompt)

    return user_goal, error_log

# --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ---

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª —Å–∫—Ä–∏–ø—Ç–∞."""
    user_goal, error_log = get_user_input()
    
    if not user_goal:
        raise ValueError("–¶–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        
    initial_task = user_goal
    if error_log:
        initial_task += "\n\n--- –õ–û–ì –û–®–ò–ë–ö–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ---\n" + error_log
    
    project_context = get_project_context()
    if not project_context: raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞.")
    
    current_prompt = get_initial_prompt(project_context, initial_task)

    for iteration_count in range(1, MAX_ITERATIONS + 1):
        print(f"\n{Colors.BOLD}{Colors.HEADER}üöÄ --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–¢–ï–†–ê–¶–ò–Ø {iteration_count}/{MAX_ITERATIONS} ---{Colors.ENDC}")
        
        answer = send_request_to_model(current_prompt)
        if not answer: return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."

        print(f"\n{Colors.OKGREEN}üì¶ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò:{Colors.ENDC}\n" + "="*20 + f"\n{answer}\n" + "="*20)

        if answer.strip().upper().startswith("–ì–û–¢–û–í–û"):
            manual_steps = extract_manual_steps_block(answer)
            final_message = f"{Colors.OKGREEN}‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{Colors.ENDC}"
            
            if manual_steps:
                final_message += f"\n\n{Colors.WARNING}‚úã –í–ê–ñ–ù–û: –¢—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ä—É—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:{Colors.ENDC}\n" + "-"*20 + f"\n{manual_steps}\n" + "-"*20
                
            return final_message

        commands_to_run = extract_todo_block(answer)
        if not commands_to_run:
            return f"{Colors.FAIL}–ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.{Colors.ENDC}"

        print(f"\n{Colors.OKBLUE}üîß –ù–∞–π–¥–µ–Ω—ã shell-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:{Colors.ENDC}\n" + "-"*20 + f"\n{commands_to_run}\n" + "-"*20)
        
        success, failed_command, error_message = apply_shell_commands(commands_to_run)
        
        project_context = get_project_context()
        if not project_context: return f"{Colors.FAIL}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.{Colors.ENDC}"

        if success:
            print(f"\n{Colors.CYAN}üßê –õ–û–ì: –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.{Colors.ENDC}")
            current_prompt = get_review_prompt(project_context, user_goal)
        else:
            print(f"\n{Colors.FAIL}üÜò –õ–û–ì: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞. –ì–æ—Ç–æ–≤–ª—é –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.{Colors.ENDC}")
            filepath = extract_filepath_from_command(failed_command)
            
            error_context = f"--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê ---\n{project_context}\n--- –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ê ---"
            if filepath and os.path.exists(filepath) and not os.path.isdir(filepath):
                with open(filepath, 'r', encoding='utf-8') as f: file_content = f.read()
                error_context = f"--- –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê: {filepath} ---\n{file_content}\n--- –ö–û–ù–ï–¶ –°–û–î–ï–†–ñ–ò–ú–û–ì–û –§–ê–ô–õ–ê ---\n\n{error_context}"
            
            current_prompt = get_error_fixing_prompt(
                failed_command=failed_command, error_message=error_message,
                goal=user_goal, context=error_context)
            
    return f"{Colors.WARNING}‚åõ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_ITERATIONS} –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{Colors.ENDC}"

if __name__ == "__main__":
    final_status = "–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    try: final_status = main()
    except KeyboardInterrupt: final_status = f"{Colors.OKBLUE}üîµ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Colors.ENDC}"
    except Exception as e:
        print(f"\n{Colors.FAIL}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ï–ü–ï–†–ï–•–í–ê–ß–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}{Colors.ENDC}")
        final_status = f"{Colors.FAIL}‚ùå –°–∫—Ä–∏–ø—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}{Colors.ENDC}"
    finally:
        print(f"\n{final_status}")
        notify_user(final_status)
        time.sleep(1) 
        print(f"\n{Colors.BOLD}üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.{Colors.ENDC}")