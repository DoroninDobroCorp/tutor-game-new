     <div>
            <button
              type="submit"
              disabled={isLoading}
              className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
                isLoading ? 'opacity-75 cursor-not-allowed' : ''
              }`}
            >
              {isLoading ? 'Creating account...' : 'Create account'}
            </button>
          </div>
          
          <div className="text-sm text-center">
            <p className="text-gray-600">
              By creating an account, you agree to our{' '}
              <a href="#" className="font-medium text-indigo-600 hover:text-indigo-500">
                Terms of Service
              </a>{' '}
              and{' '}
              <a href="#" className="font-medium text-indigo-600 hover:text-indigo-500">
                Privacy Policy
              </a>
              .
            </p>
          </div>
        </form>
      </div>
    </div>
  );
}


Файл: frontend/src/pages/StudentDashboardPage.jsx
-------------------------------------------------
import React from 'react';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';

export const StudentDashboardPage = () => {
  // Get user data from Redux to display a personalized greeting
  const { user } = useSelector((state) => state.auth);

  return (
    <div className="container mx-auto mt-10 p-5">
      <h1 className="text-3xl font-bold text-gray-800">
        Welcome, {user?.fullName || 'Student'}!
      </h1>
      <p className="mt-2 text-lg text-gray-600">
        This is your personal dashboard. Let's start learning!
      </p>
      <div className="mt-6">
        <Link
          to="/game"
          className="px-4 py-2 font-semibold text-white bg-indigo-600 rounded-md hover:bg-indigo-700"
        >
          Go to Game
        </Link>
      </div>
    </div>
  );
};

export default StudentDashboardPage;


Файл: frontend/src/pages/TeacherDashboardPage.jsx
-------------------------------------------------
import React from 'react';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';

export const TeacherDashboardPage = () => {
  // Get user data from Redux
  const { user } = useSelector((state) => state.auth);

  return (
    <div className="container mx-auto mt-10 p-5">
      <h1 className="text-3xl font-bold text-gray-800">
        Welcome, {user?.fullName || 'Teacher'}!
      </h1>
      <p className="mt-2 text-lg text-gray-600">
        This is your Teacher Dashboard. Let's create something new.
      </p>
      <div className="mt-6">
        <Link
          to="/game-constructor"
          className="px-4 py-2 font-semibold text-white bg-green-600 rounded-md hover:bg-green-700"
        >
          Create New Game
        </Link>
      </div>
    </div>
  );
};

export default TeacherDashboardPage;


Файл: frontend/src/pages/chat/ChatPage.tsx
------------------------------------------
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppSelector } from '../../app/hooks';
import Chat from '../../features/chat/Chat';

export default function ChatPage() {
  const { user } = useAppSelector((state) => state.auth);
  const navigate = useNavigate();

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!user) {
      navigate('/login');
    }
  }, [user, navigate]);

  if (!user) {
    return null; // or a loading spinner
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">
        {user.role === 'teacher' ? 'Student Messages' : 'Chat with Teachers'}
      </h1>
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <Chat />
      </div>
    </div>
  );
}


Файл: frontend/src/pages/index.ts
---------------------------------
// Re-export all page components
export * from './StudentDashboardPage';
export * from './TeacherDashboardPage';
// Add other page exports here as they are created


Файл: frontend/src/pages/student/MathProblemSolver.tsx
------------------------------------------------------
import React, { useState } from 'react';

const MathProblemSolver: React.FC = () => {
  const [problem, setProblem] = useState('');
  const [solution, setSolution] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!problem.trim()) {
      setError('Please enter a math problem');
      return;
    }

    setIsLoading(true);
    setError('');
    
    try {
      const token = localStorage.getItem('token') || sessionStorage.getItem('token');
      if (!token) {
        setError('Please log in to solve math problems');
        return;
      }

      const response = await fetch('/api/student/math-problem', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to get math problem');
      }

      const data = await response.json();
      
      // For now, just show the generated problem
      // In the future, this will be interactive
      setSolution(`Generated problem: ${data.problem}\nAnswer: ${data.answer}\nExplanation: ${data.explanation}`);
    } catch (err) {
      setError('Failed to solve the problem. Please try again.');
      console.error('Math solver error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Math Problem Solver</h1>
      
      <form onSubmit={handleSubmit} className="mb-8">
        <div className="flex flex-col gap-4">
          <div>
            <label htmlFor="math-problem" className="block text-sm font-medium text-gray-700 mb-1">
              Enter a math problem:
            </label>
            <input
              id="math-problem"
              type="text"
              value={problem}
              onChange={(e) => setProblem(e.target.value)}
              placeholder="e.g., 2 + 2, 5 * (3 + 4), solve for x: 2x + 3 = 7"
              className="w-full p-3 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={isLoading}
            />
          </div>
          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            >
              {isLoading ? 'Solving...' : 'Solve'}
            </button>
          </div>
        </div>
        {error && <p className="mt-2 text-red-600">{error}</p>}
      </form>

      {solution && (
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">Solution</h2>
          <div className="prose max-w-none">
            <p>{solution}</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default MathProblemSolver;


Файл: frontend/src/pages/student/StoryGenerator.tsx
---------------------------------------------------
import React, { useState } from 'react';

const StoryGenerator: React.FC = () => {
  const [topic, setTopic] = useState('');
  const [story, setStory] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!topic.trim()) {
      setError('Please enter a topic');
      return;
    }

    setIsLoading(true);
    setError('');
    
    try {
      const token = localStorage.getItem('token') || sessionStorage.getItem('token');
      if (!token) {
        setError('Please log in to generate stories');
        return;
      }

      const response = await fetch('/api/generate/story', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          prompt: topic,
          ageGroup: 'elementary', // Default age group
          subject: 'general'
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate story');
      }

      const data = await response.json();
      setStory(data.story);
    } catch (err) {
      setError('Failed to generate story. Please try again.');
      console.error('Story generation error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">Story Generator</h1>
      
      <form onSubmit={handleSubmit} className="mb-8">
        <div className="flex gap-4">
          <input
            type="text"
            value={topic}
            onChange={(e) => setTopic(e.target.value)}
            placeholder="Enter a topic for your story..."
            className="flex-1 p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            disabled={isLoading}
          />
          <button
            type="submit"
            disabled={isLoading}
            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
          >
            {isLoading ? 'Generating...' : 'Generate'}
          </button>
        </div>
        {error && <p className="mt-2 text-red-600">{error}</p>}
      </form>

      {story && (
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">Your Story</h2>
          <p className="whitespace-pre-line">{story}</p>
        </div>
      )}
    </div>
  );
};

export default StoryGenerator;


Файл: frontend/src/pages/student/StudentDashboard.tsx
-----------------------------------------------------
import { ReactNode } from 'react';
import { Link } from 'react-router-dom';
import { useAppSelector } from '../../app/hooks';

interface StudentDashboardProps {
  children?: ReactNode;
}

export default function StudentDashboard({ children }: StudentDashboardProps) {
  const { user } = useAppSelector((state) => state.auth);
  
  // If children are provided, render them in a container
  if (children) {
    return <div className="w-full">{children}</div>;
  }
  
  // Otherwise, render the default dashboard content
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">
        Welcome back, {user?.firstName || 'Student'}!
      </h1>
      <div className="bg-white p-6 rounded-lg shadow">
        <p className="text-gray-600 mb-4">Select an option to get started:</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Link 
            to="/student" 
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <h3 className="font-medium text-lg">Story Mode</h3>
            <p className="text-sm text-gray-500">Continue your learning journey</p>
          </Link>
          <Link 
            to="/student/math" 
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <h3 className="font-medium text-lg">Math Problems</h3>
            <p className="text-sm text-gray-500">Practice your math skills</p>
          </Link>
        </div>
      </div>
    </div>
  );
}


Файл: frontend/src/pages/student/StudentDashboard.tsx.bak
---------------------------------------------------------
import { ReactNode } from 'react';
import { useAppSelector } from '../../app/hooks';
import { Link } from 'react-router-dom';

interface StudentDashboardProps {
  children?: ReactNode;
}

export default function StudentDashboard({ children }: StudentDashboardProps) {
  const { user } = useAppSelector((state) => state.auth);
  
  // If children are provided, render them in a container
  if (children) {
    return <div className="w-full">{children}</div>;
  }
  
  // Otherwise, render the default dashboard content
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">
        Welcome back, {user?.firstName || 'Student'}!
      </h1>
      <div className="bg-white p-6 rounded-lg shadow">
        <p className="text-gray-600 mb-4">Select an option to get started:</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Link 
            to="/student" 
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <h3 className="font-medium text-lg">Story Mode</h3>
            <p className="text-sm text-gray-500">Continue your learning journey</p>
          </Link>
          <Link 
            to="/student/math" 
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <h3 className="font-medium text-lg">Math Problems</h3>
            <p className="text-sm text-gray-500">Practice your math skills</p>
          </Link>
        </div>
            <div className="ml-5 w-0 flex-1">
              <h2 className="text-2xl font-bold text-gray-900">
                Welcome back, {user?.firstName}!
              </h2>
              <p className="mt-1 text-sm text-gray-500">
                Continue your math adventure where you left off.
              </p>
            </div>
          </div>
        </div>
      </div>

      {children || (
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {/* Progress Overview Card */}
          <div className="overflow-hidden bg-white rounded-lg shadow">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ChartBarIcon className="w-6 h-6 text-gray-400" aria-hidden="true" />
                </div>
                <div className="flex-1 w-0 ml-5">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">Level {progressData.level}</dt>
                    <dd>
                      <div className="text-lg font-medium text-gray-900">
                        {progressData.experience} / {progressData.nextLevelExp} XP
                      </div>
                    </dd>
                  </dl>
                </div>
              </div>
              <div className="mt-4">
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div 
                    className="bg-indigo-600 h-2.5 rounded-full" 
                    style={{ width: `${(progressData.experience / progressData.nextLevelExp) * 100}%` }}
                  ></div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  {progressData.completedChapters} of {progressData.totalChapters} chapters completed
                </p>
              </div>
            </div>
          </div>

          {/* Chapters Completed */}
          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0 bg-green-500 rounded-md p-3">
                  <BookOpenIcon className="h-6 w-6 text-white" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Chapters Completed
                    </dt>
                    <dd>
                      <div className="text-lg font-medium text-gray-900">
                        {progressData.completedChapters} / {progressData.totalChapters}
                      </div>
                    </dd>
                  </dl>
                </div>
              </div>
              <div className="mt-5">
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div
                    className="bg-green-500 h-2.5 rounded-full"
                    style={{
                      width: `${
                        (progressData.completedChapters / progressData.totalChapters) * 100
                      }%`,
                    }}
                  ></div>
                </div>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Chapters Completed
                  </dt>
                  <dd>
                    <div className="text-lg font-medium text-gray-900">
                      {progressData.completedChapters} / {progressData.totalChapters}
                    </div>
                  </dd>
                </dl>
              </div>
            </div>
            <div className="mt-5">
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-green-500 h-2.5 rounded-full"
                  style={{
                    width: `${
                      (progressData.completedChapters / progressData.totalChapters) * 100
                    }%`,
                  }}
                ></div>
              </div>
            </div>
          </div>
        </div>

        {/* Badges Earned */}
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0 bg-yellow-500 rounded-md p-3">
                <TrophyIcon className="h-6 w-6 text-white" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Badges Earned
                  </dt>
                  <dd>
                    <div className="text-lg font-medium text-gray-900">
                      {progressData.badges.filter((b) => b.earned).length} /{' '}
                      {progressData.badges.length}
                    </div>
                  </dd>
                </dl>
              </div>
            </div>
            <div className="mt-5">
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-yellow-500 h-2.5 rounded-full"
                  style={{
                    width: `${
                      progressData.badges.length > 0
                        ? (progressData.badges.filter((b) => b.earned).length /
                            progressData.badges.length) *
                          100
                        : 0
                    }%`,
                  }}
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="px-4 py-5 sm:p-6">
          <h3 className="text-lg font-medium leading-6 text-gray-900">Quick Actions</h3>
          <div className="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
            <Link
              to="/student/story"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <BookOpenIcon className="mr-2 h-5 w-5" />
              Continue Story
            </Link>
            <Link
              to="/student/math"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <LightBulbIcon className="mr-2 h-5 w-5" />
              Practice Math
            </Link>
            <Link
              to="/student/progress"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <ChartBarIcon className="mr-2 h-5 w-5" />
              View Progress
            </Link>
            <Link
              to="/student/badges"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <TrophyIcon className="mr-2 h-5 w-5" />
              My Badges
            </Link>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg font-medium leading-6 text-gray-900">Recent Activity</h3>
        </div>
        <div className="border-t border-gray-200">
          <ul className="divide-y divide-gray-200">
            {progressData.recentActivity.length > 0 ? (
              progressData.recentActivity.map((activity) => (
                <li key={activity.id} className="px-4 py-4 sm:px-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      {activity.type === 'chapter' && (
                        <BookOpenIcon className="h-5 w-5 text-indigo-500" />
                      )}
                      {activity.type === 'quiz' && (
                        <LightBulbIcon className="h-5 w-5 text-green-500" />
                      )}
                      {activity.type === 'achievement' && (
                        <TrophyIcon className="h-5 w-5 text-yellow-500" />
                      )}
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.title}
                      </p>
                      <p className="text-sm text-gray-500">
                        {new Date(activity.date).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                        })}
                      </p>
                    </div>
                    <div className="ml-auto">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          activity.completed
                            ? 'bg-green-100 text-green-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}
                      >
                        {activity.completed ? 'Completed' : 'In Progress'}
                      </span>
                    </div>
                  </div>
                </li>
              ))
            ) : (
              <li className="px-4 py-4 sm:px-6 text-center text-gray-500">
                No recent activity. Start your first chapter!
              </li>
            )}
          </ul>
        </div>
        {progressData.recentActivity.length > 0 && (
          <div className="bg-gray-50 px-4 py-4 sm:px-6 text-right">
            <Link
              to="/student/activity"
              className="text-sm font-medium text-indigo-600 hover:text-indigo-500"
            >
              View all activity
              <span aria-hidden="true"> &rarr;</span>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}


Файл: frontend/src/pages/teacher/StudentProgress.tsx
----------------------------------------------------
import React from 'react';
import { useParams } from 'react-router-dom';

const StudentProgress: React.FC = () => {
  const { studentId } = useParams<{ studentId: string }>();
  
  // Mock data - in a real app, this would come from an API
  const studentData = {
    id: studentId || '123',
    name: 'John Doe',
    email: 'john@example.com',
    level: 5,
    experience: 1250,
    nextLevelExp: 1500,
    completedLessons: 12,
    averageScore: 85,
    lastActive: '2023-06-01T14:30:00Z',
    progress: [
      { topic: 'Algebra', progress: 75 },
      { topic: 'Geometry', progress: 60 },
      { topic: 'Calculus', progress: 90 },
    ],
    recentActivities: [
      { id: 1, activity: 'Completed lesson: Quadr

ГПТ, Я ЕЩЕ НЕ ЗАКОНЧИЛ - ПРОСТО КОРОТКО ОТВЕТЬ ОК И ВСЕ!!!