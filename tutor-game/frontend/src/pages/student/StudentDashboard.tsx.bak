import { ReactNode } from 'react';
import { useAppSelector } from '../../app/hooks';
import { Link } from 'react-router-dom';

interface StudentDashboardProps {
  children?: ReactNode;
}

export default function StudentDashboard({ children }: StudentDashboardProps) {
  const { user } = useAppSelector((state) => state.auth);
  
  // If children are provided, render them in a container
  if (children) {
    return <div className="w-full">{children}</div>;
  }
  
  // Otherwise, render the default dashboard content
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">
        Welcome back, {user?.firstName || 'Student'}!
      </h1>
      <div className="bg-white p-6 rounded-lg shadow">
        <p className="text-gray-600 mb-4">Select an option to get started:</p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Link 
            to="/student" 
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <h3 className="font-medium text-lg">Story Mode</h3>
            <p className="text-sm text-gray-500">Continue your learning journey</p>
          </Link>
          <Link 
            to="/student/math" 
            className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
          >
            <h3 className="font-medium text-lg">Math Problems</h3>
            <p className="text-sm text-gray-500">Practice your math skills</p>
          </Link>
        </div>
            <div className="ml-5 w-0 flex-1">
              <h2 className="text-2xl font-bold text-gray-900">
                Welcome back, {user?.firstName}!
              </h2>
              <p className="mt-1 text-sm text-gray-500">
                Continue your math adventure where you left off.
              </p>
            </div>
          </div>
        </div>
      </div>

      {children || (
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {/* Progress Overview Card */}
          <div className="overflow-hidden bg-white rounded-lg shadow">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ChartBarIcon className="w-6 h-6 text-gray-400" aria-hidden="true" />
                </div>
                <div className="flex-1 w-0 ml-5">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">Level {progressData.level}</dt>
                    <dd>
                      <div className="text-lg font-medium text-gray-900">
                        {progressData.experience} / {progressData.nextLevelExp} XP
                      </div>
                    </dd>
                  </dl>
                </div>
              </div>
              <div className="mt-4">
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div 
                    className="bg-indigo-600 h-2.5 rounded-full" 
                    style={{ width: `${(progressData.experience / progressData.nextLevelExp) * 100}%` }}
                  ></div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  {progressData.completedChapters} of {progressData.totalChapters} chapters completed
                </p>
              </div>
            </div>
          </div>

          {/* Chapters Completed */}
          <div className="bg-white overflow-hidden shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <div className="flex items-center">
                <div className="flex-shrink-0 bg-green-500 rounded-md p-3">
                  <BookOpenIcon className="h-6 w-6 text-white" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 truncate">
                      Chapters Completed
                    </dt>
                    <dd>
                      <div className="text-lg font-medium text-gray-900">
                        {progressData.completedChapters} / {progressData.totalChapters}
                      </div>
                    </dd>
                  </dl>
                </div>
              </div>
              <div className="mt-5">
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div
                    className="bg-green-500 h-2.5 rounded-full"
                    style={{
                      width: `${
                        (progressData.completedChapters / progressData.totalChapters) * 100
                      }%`,
                    }}
                  ></div>
                </div>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Chapters Completed
                  </dt>
                  <dd>
                    <div className="text-lg font-medium text-gray-900">
                      {progressData.completedChapters} / {progressData.totalChapters}
                    </div>
                  </dd>
                </dl>
              </div>
            </div>
            <div className="mt-5">
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-green-500 h-2.5 rounded-full"
                  style={{
                    width: `${
                      (progressData.completedChapters / progressData.totalChapters) * 100
                    }%`,
                  }}
                ></div>
              </div>
            </div>
          </div>
        </div>

        {/* Badges Earned */}
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center">
              <div className="flex-shrink-0 bg-yellow-500 rounded-md p-3">
                <TrophyIcon className="h-6 w-6 text-white" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    Badges Earned
                  </dt>
                  <dd>
                    <div className="text-lg font-medium text-gray-900">
                      {progressData.badges.filter((b) => b.earned).length} /{' '}
                      {progressData.badges.length}
                    </div>
                  </dd>
                </dl>
              </div>
            </div>
            <div className="mt-5">
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-yellow-500 h-2.5 rounded-full"
                  style={{
                    width: `${
                      progressData.badges.length > 0
                        ? (progressData.badges.filter((b) => b.earned).length /
                            progressData.badges.length) *
                          100
                        : 0
                    }%`,
                  }}
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="px-4 py-5 sm:p-6">
          <h3 className="text-lg font-medium leading-6 text-gray-900">Quick Actions</h3>
          <div className="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
            <Link
              to="/student/story"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <BookOpenIcon className="mr-2 h-5 w-5" />
              Continue Story
            </Link>
            <Link
              to="/student/math"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <LightBulbIcon className="mr-2 h-5 w-5" />
              Practice Math
            </Link>
            <Link
              to="/student/progress"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <ChartBarIcon className="mr-2 h-5 w-5" />
              View Progress
            </Link>
            <Link
              to="/student/badges"
              className="flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md shadow-sm text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <TrophyIcon className="mr-2 h-5 w-5" />
              My Badges
            </Link>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg font-medium leading-6 text-gray-900">Recent Activity</h3>
        </div>
        <div className="border-t border-gray-200">
          <ul className="divide-y divide-gray-200">
            {progressData.recentActivity.length > 0 ? (
              progressData.recentActivity.map((activity) => (
                <li key={activity.id} className="px-4 py-4 sm:px-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      {activity.type === 'chapter' && (
                        <BookOpenIcon className="h-5 w-5 text-indigo-500" />
                      )}
                      {activity.type === 'quiz' && (
                        <LightBulbIcon className="h-5 w-5 text-green-500" />
                      )}
                      {activity.type === 'achievement' && (
                        <TrophyIcon className="h-5 w-5 text-yellow-500" />
                      )}
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.title}
                      </p>
                      <p className="text-sm text-gray-500">
                        {new Date(activity.date).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                        })}
                      </p>
                    </div>
                    <div className="ml-auto">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          activity.completed
                            ? 'bg-green-100 text-green-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}
                      >
                        {activity.completed ? 'Completed' : 'In Progress'}
                      </span>
                    </div>
                  </div>
                </li>
              ))
            ) : (
              <li className="px-4 py-4 sm:px-6 text-center text-gray-500">
                No recent activity. Start your first chapter!
              </li>
            )}
          </ul>
        </div>
        {progressData.recentActivity.length > 0 && (
          <div className="bg-gray-50 px-4 py-4 sm:px-6 text-right">
            <Link
              to="/student/activity"
              className="text-sm font-medium text-indigo-600 hover:text-indigo-500"
            >
              View all activity
              <span aria-hidden="true"> &rarr;</span>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}
