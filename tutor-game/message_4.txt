etails?: any) {
    super(message, 501, true, details);
  }
}

/**
 * 503 Service Unavailable Error
 */
export class ServiceUnavailableError extends AppError {
  public readonly retryAfter?: number;

  constructor(
    message: string = 'Service Unavailable',
    retryAfter?: number,
    details?: any
  ) {
    super(message, 503, true, details);
    this.retryAfter = retryAfter;
  }
}

/**
 * Error handler middleware
 */
export const errorHandler = (err: any, req: any, res: any, next: any) => {
  // Default to 500 if status code not set
  const statusCode = err.statusCode || 500;
  
  // Log the error
  if (statusCode >= 500) {
    console.error('Server Error:', err);
  } else {
    console.warn('Client Error:', err);
  }

  // Don't leak error details in production
  const errorResponse = {
    success: false,
    error: err.name || 'Error',
    message: err.message || 'An error occurred',
    ...(process.env.NODE_ENV !== 'production' && {
      stack: err.stack,
      details: err.details,
    }),
  };

  // Set headers for rate limiting
  if (err instanceof RateLimitError) {
    res.set('Retry-After', String(err.retryAfter));
  }

  // Send the error response
  res.status(statusCode).json(errorResponse);
};

/**
 * Async error handler wrapper for Express routes
 */
export const asyncHandler = (fn: any) => (req: any, res: any, next: any) => {
  return Promise.resolve(fn(req, res, next)).catch(next);
};


Файл: backend/src/utils/logger.ts
---------------------------------
import { config } from '../config/env';
import winston, { Logger, format } from 'winston';
import 'winston-daily-rotate-file';

const { combine, timestamp, printf, colorize, errors } = format;

// Create a custom format for console output
const consoleFormat = combine(
  timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
  colorize({ all: true }),
  printf(({ level, message, timestamp, ...meta }) => {
    let logMessage = `${timestamp} [${level}]: ${message}`;
    if (Object.keys(meta).length > 0) {
      logMessage += ` ${JSON.stringify(meta, null, 2)}`;
    }
    return logMessage;
  })
);

// Create a JSON format for file output
const fileFormat = combine(
  timestamp(),
  errors({ stack: true }),
  format.json()
);

// Create transports array
const transports = [
  // Console transport for development
  new winston.transports.Console({
    format: consoleFormat,
    level: config.isDevelopment ? 'debug' : 'info',
  }),
  
  // File transport for production
  new winston.transports.DailyRotateFile({
    filename: 'logs/application-%DATE%.log',
    datePattern: 'YYYY-MM-DD',
    zippedArchive: true,
    maxSize: '20m',
    maxFiles: '14d',
    format: fileFormat,
    level: 'info',
  }),
  
  // Error file transport
  new winston.transports.DailyRotateFile({
    filename: 'logs/error-%DATE%.log',
    datePattern: 'YYYY-MM-DD',
    zippedArchive: true,
    maxSize: '20m',
    maxFiles: '30d',
    level: 'error',
    format: fileFormat,
  })
];

// Create base logger instance
const logger: Logger = winston.createLogger({
  level: 'info',
  format: fileFormat,
  defaultMeta: { service: 'tutor-game-api' },
  transports,
  exitOnError: false,
});

// Handle uncaught exceptions
if (config.isProduction) {
  process
    .on('unhandledRejection', (reason) => {
      logger.error('Unhandled Rejection:', { reason });
    })
    .on('uncaughtException', (error) => {
      logger.error('Uncaught Exception:', { error });
    });
}

// Create a child logger with a specific context
export const createLogger = (context: string) => {
  return logger.child({ context });
};

export { logger };

export default logger;


Файл: backend/src/utils/response.ts
-----------------------------------
import { Response } from 'express';
import { logger } from './logger';

interface ApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
  code?: number;
  meta?: {
    page?: number;
    limit?: number;
    total?: number;
    totalPages?: number;
  };
}

/**
 * Send a successful response
 */
export const sendSuccess = <T>(
  res: Response,
  data: T,
  message = 'Success',
  statusCode = 200,
  meta?: {
    page?: number;
    limit?: number;
    total?: number;
    totalPages?: number;
  }
): void => {
  const response: ApiResponse<T> = {
    success: true,
    message,
    data,
    code: statusCode,
  };

  if (meta) {
    response.meta = meta;
  }

  res.status(statusCode).json(response);
};

/**
 * Send an error response
 */
export const sendError = (
  res: Response,
  message: string | Error,
  statusCode = 500,
  error?: any
): void => {
  const errorMessage = message instanceof Error ? message.message : message;
  const errorName = message instanceof Error ? message.name : 'Error';
  
  // Log the error with type-safe error handling
  logger.error(`${errorName}: ${errorMessage}`, { 
    statusCode, 
    stack: message instanceof Error ? message.stack : undefined,
    error: error ? String(error) : undefined
  } as any);

  const response: ApiResponse<null> = {
    success: false,
    message: errorMessage,
    error: errorName,
    code: statusCode,
  };

  // In production, don't expose error details
  if (process.env.NODE_ENV === 'production' && statusCode === 500) {
    response.message = 'Internal server error';
  }

  res.status(statusCode).json(response);
};

/**
 * Send a validation error response
 */
export const sendValidationError = (
  res: Response,
  errors: Record<string, string[]>,
  message = 'Validation failed'
): void => {
  logger.warn(`Validation error: ${message}`, { errors } as any);
  
  const response: ApiResponse<null> = {
    success: false,
    message,
    error: 'Validation Error',
    code: 400,
    data: null,
  };

  res.status(400).json({
    ...response,
    errors,
  });
};

/**
 * Send a not found response
 */
export const sendNotFound = (res: Response, message = 'Resource not found'): void => {
  logger.warn(`Not found: ${message}`, {} as any);
  
  const response: ApiResponse<null> = {
    success: false,
    message,
    error: 'Not Found',
    code: 404,
  };

  res.status(404).json(response);
};

/**
 * Send an unauthorized response
 */
export const sendUnauthorized = (res: Response, message = 'Unauthorized'): void => {
  logger.warn(`Unauthorized: ${message}`, {} as any);
  
  const response: ApiResponse<null> = {
    success: false,
    message,
    error: 'Unauthorized',
    code: 401,
  };

  res.status(401).json(response);
};

/**
 * Send a forbidden response
 */
export const sendForbidden = (res: Response, message = 'Forbidden'): void => {
  logger.warn(`Forbidden: ${message}`, {} as any);
  
  const response: ApiResponse<null> = {
    success: false,
    message,
    error: 'Forbidden',
    code: 403,
  };

  res.status(403).json(response);
};

/**
 * Send a rate limit exceeded response
 */
export const sendRateLimitExceeded = (res: Response, message = 'Too many requests'): void => {
  logger.warn(`Rate limit exceeded: ${message}`, {} as any);
  
  const response: ApiResponse<null> = {
    success: false,
    message,
    error: 'Too Many Requests',
    code: 429,
  };

  res.status(429)
    .set('Retry-After', '900') // 15 minutes in seconds
    .json(response);
};


Файл: backend/tsconfig.json
---------------------------
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.test.ts"]
}


Файл: concurrently
------------------
Не удалось прочитать содержимое файла.

Файл: frontend/index.html
-------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Math Quest</title>
    <base href="/" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
    <script>
      // This ensures the base URL is set correctly for all relative URLs
      document.addEventListener('DOMContentLoaded', () => {
        if (!document.baseURI.endsWith('/')) {
          const base = document.createElement('base');
          base.href = '/';
          document.head.prepend(base);
        }
      });
    </script>
  </body>
</html>


Файл: frontend/plugins/spa-fallback.ts
--------------------------------------
import { Plugin } from 'vite';
import { readFileSync } from 'fs';
import { resolve } from 'path';

export default function spaFallback(): Plugin {
  return {
    name: 'spa-fallback',
    configureServer(server) {
      // Serve index.html for all routes
      return () => {
        server.middlewares.use((req, res, next) => {
          // Skip API requests and static assets
          if (
            req.url?.startsWith('/api/') ||
            req.url?.includes('.') ||
            req.url?.startsWith('/@vite/') ||
            req.url?.startsWith('/node_modules/') ||
            req.url?.startsWith('/src/') ||
            req.url?.startsWith('/assets/')
          ) {
            return next();
          }

          // For all other routes, serve index.html
          const html = readFileSync(resolve(process.cwd(), 'index.html'), 'utf-8');
          res.statusCode = 200;
          res.setHeader('Content-Type', 'text/html');
          res.end(html);
        });
      };
    },
  };
}


Файл: frontend/public/favicon.ico
---------------------------------
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH6AoCBBoQZ7zYFwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAJklEQVQ4y2NgGAVDA/z//z+fgYHhPwMDAwMj0Qb8//+f8f///4zE6mFkZGQk2QAAYQ8MDBi0QnAAAAAASUVORK5CYII=


Файл: frontend/src/App.tsx
--------------------------
import { Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { useAppSelector } from './app/hooks';
import { selectIsAuthenticated } from './features/auth/authSlice';
import { useGetProfileQuery } from './features/auth/authApi';
import Layout from './components/common/Layout';
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import StudentDashboard from './pages/student/StudentDashboard';
import TeacherDashboard from './pages/teacher/TeacherDashboard';
import { StudentDashboardPage } from './pages/StudentDashboardPage';
import { TeacherDashboardPage } from './pages/TeacherDashboardPage';
import MathProblemSolver from './pages/student/MathProblemSolver';
import StudentProgress from './pages/teacher/StudentProgress';
import ChatPage from './pages/chat/ChatPage';
import NotFoundPage from './pages/NotFoundPage';
import Spinner from '@/components/common/Spinner';

// Protected Route Component
const ProtectedRoute = ({ children }: { children: JSX.Element }) => {
  const isAuthenticated = useAppSelector(selectIsAuthenticated);
  const { isLoading } = useGetProfileQuery(undefined, {
    // Skip the query if we already have the user data
    skip: isAuthenticated,
  });
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" />
      </div>
    );
  }
  
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }
  
  return children;
};

// Role-based Route Component
const RoleBasedRoute = ({
  role,
  children,
}: {
  role: 'student' | 'teacher';
  children: JSX.Element;
}) => {
  const { user } = useAppSelector((state) => state.auth);
  
  if (!user || user.role.toLowerCase() !== role.toLowerCase()) {
    return <Navigate to="/" replace />;
  }
  
  return children;
};

function App() {
  // This will automatically run on app load if there's a token
  const { isLoading } = useGetProfileQuery(undefined, {
    // Skip if we already have the user data in the store
    skip: false,
    // Don't refetch on mount if we already have data
    refetchOnMountOrArgChange: false,
  });
  
  // Show loading spinner while checking authentication
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" />
      </div>
    );
  }
  return (
    <div className="min-h-screen bg-gray-50">
      <Routes>
        {/* Public Routes */}
        <Route path="/" element={<Layout><HomePage /></Layout>} />
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />
        
        {/* Protected Student Routes */}
        <Route path="/student" element={
          <ProtectedRoute>
            <RoleBasedRoute role="student">
              <Layout><StudentDashboard /></Layout>
            </RoleBasedRoute>
          </ProtectedRoute>
        }>
          <Route index element={<StudentDashboardPage />} />
          <Route path="math" element={<StudentDashboard><MathProblemSolver /></StudentDashboard>} />
          <Route path="chat" element={<StudentDashboard><ChatPage /></StudentDashboard>} />
        </Route>
        
        {/* Protected Teacher Routes */}
        <Route path="/teacher" element={
          <ProtectedRoute>
            <RoleBasedRoute role="teacher">
              <Layout><TeacherDashboard /></Layout>
            </RoleBasedRoute>
          </ProtectedRoute>
        }>
          <Route index element={<TeacherDashboardPage />} />
          <Route path="students" element={<TeacherDashboard><div>Students Management</div></TeacherDashboard>} />
          <Route path="students/:studentId" element={<TeacherDashboard><StudentProgress /></TeacherDashboard>} />
          <Route path="progress" element={<TeacherDashboard><div>Progress Overview</div></TeacherDashboard>} />
          <Route path="chat" element={<TeacherDashboard><ChatPage /></TeacherDashboard>} />
        </Route>
        
        {/* 404 Route */}
        <Route path="*" element={<Layout><NotFoundPage /></Layout>} />
      </Routes>
      
      <Toaster position="top-right" />
    </div>
  );
}

export default App;


Файл: frontend/src/api/client.ts
--------------------------------
import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { store } from '../app/store';

const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_URL || '/api',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    const token = store.getState().auth.token;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor
apiClient.interceptors.response.use(
  (response: AxiosResponse) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };
    
    // If unauthorized and not already retried
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        // Try to refresh token
        const response = await axios.post(
          `${import.meta.env.VITE_API_URL || '/api'}/auth/refresh`,
          {},
          { withCredentials: true }
        );
        
        const { accessToken, user } = response.data.data;
        
        // Update the token and user in the store
        store.dispatch({
          type: 'auth/setCredentials',
          payload: { 
            user,
            token: accessToken 
          },
        });
        
        // Update the Authorization header
        if (originalRequest.headers) {
          originalRequest.headers.Authorization = `Bearer ${accessToken}`;
        }
        
        // Retry the original request
        return apiClient(originalRequest);
      } catch (refreshError) {
        // If refresh token fails, logout the user
        store.dispatch({ type: 'auth/logout' });
        return Promise.reject(refreshError);
      }
    }
    
    return Promise.reject(error);
  }
);

export default apiClient;


Файл: frontend/src/app/api/apiSlice.ts
--------------------------------------
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// This function MUST be here, in the "heart" of the API,
// so it applies to ALL requests
const baseQuery = fetchBaseQuery({
  baseUrl: 'http://localhost:3002/api',
  prepareHeaders: (headers) => {
    // Get token from localStorage (the one we saved during login)
    const token = window.localStorage.getItem('token'); 
    if (token) {
      // If token exists, add it to headers for EVERY request
      headers.set('authorization', `Bearer ${token}`);
    }
    return headers;
  },
});

export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: baseQuery, // Use our new configuration with headers
  tagTypes: ['User', 'Game'],
  endpoints: () => ({}),
});

export default apiSlice;


Файл: frontend/src/app/hooks/index.ts
-------------------------------------
// Re-export all hooks from this file
export * from './useAppDispatch';
export * from './useAppSelector';


Файл: frontend/src/app/hooks/useAppDispatch.ts
----------------------------------------------
import { useDispatch } from 'react-redux';
import type { RootState } from '../store';
import { ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';

type TypedDispatch = ThunkDispatch<RootState, unknown, UnknownAction>;

export const useAppDispatch = (): TypedDispatch => useDispatch<TypedDispatch>();


Файл: frontend/src/app/hooks/useAppSelector.ts
----------------------------------------------
import { TypedUseSelectorHook, useSelector } from 'react-redux';
import type { RootState } from '../store';

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;


Файл: frontend/src/app/store.ts
-------------------------------
import { configureStore } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import { apiSlice } from './api/apiSlice';
import authReducer, { AuthState } from '../features/auth/authSlice';

// --- START OF MAIN FIX ---

// 1. Try to get token from storage
const token = typeof window !== 'undefined' ? window.localStorage.getItem('token') : null;

// 2. Create preloaded state for our auth slice.
// If token exists, we initialize the slice with this token.
// If not, Redux will use the initial state from the slice itself.
const preloadedState = token ? {
  auth: {
    user: null, // We still don't know the user, we'll need to request it
    token: token,
    refreshToken: null, // Refresh token is usually not stored in localStorage
    isAuthenticated: !!token, // Set to true if token exists
    isLoading: false,
    error: null
  } as AuthState,
} : undefined;

// --- END OF MAIN FIX ---

export const store = configureStore({
  reducer: {
    [apiSlice.reducerPath]: apiSlice.reducer,
    auth: authReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(apiSlice.middleware),
  devTools: process.env.NODE_ENV !== 'production',
  // 3. Pass the preloaded state to the store
  preloadedState,
});

setupListeners(store.dispatch);

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;


Файл: frontend/src/components/common/Layout.tsx
-----------------------------------------------
import { Outlet, Link, useLocation, useNavigate } from 'react-router-dom';
import { Fragment, useState, ReactNode } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import {
  Bars3Icon,
  HomeIcon,
  BookOpenIcon,
  CalculatorIcon,
  UserGroupIcon,
  ArrowRightOnRectangleIcon,
  ChartBarIcon,
} from '@heroicons/react/24/outline';
import { useAppDispatch, useAppSelector } from '../../app/hooks';
import { logout } from '../../features/auth/authSlice';

interface NavigationItem {
  name: string;
  href: string;
  icon: React.ElementType;
  current: boolean;
}

const studentNavigation: NavigationItem[] = [
  { name: 'Dashboard', href: '/student', icon: HomeIcon, current: false },
  { name: 'Story Mode', href: '/student/story', icon: BookOpenIcon, current: false },
  { name: 'Math Problems', href: '/student/math', icon: CalculatorIcon, current: false },
];

const teacherNavigation: NavigationItem[] = [
  { name: 'Dashboard', href: '/teacher', icon: HomeIcon, current: false },
  { name: 'Students', href: '/teacher/students', icon: UserGroupIcon, current: false },
  { name: 'Progress', href: '/teacher/progress', icon: ChartBarIcon, current: false },
];

function classNames(...classes: (string | boolean | undefined)[]): string {
  return classes.filter(Boolean).join(' ');
}

interface LayoutProps {
  children?: ReactNode;
}

export default function Layout({ children }: LayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state) => state.auth);

  // Get navigation items based on user role and current path
  const getNavItems = () => {
    const items = user?.role === 'teacher' ? teacherNavigation : studentNavigation;
    return items.map(item => ({
      ...item,
      current: location.pathname.startsWith(item.href),
    }));
  };
  
  const navigation = getNavItems();

  const handleLogout = () => {
    try {
      dispatch(logout());
      navigate('/login');
    } catch (err) {
      console.error('Failed to logout:', err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Mobile sidebar */}
      <Transition.Root show={sidebarOpen} as={Fragment}>
        <Dialog as="div" className="relative z-50 lg:hidden" onClose={setSidebarOpen}>
          <Transition.Child
            as={Fragment}
            enter="transition-opacity ease-linear duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="transition-opacity ease-linear duration-300"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-gray-900/80" />
          </Transition.Child>

          <div className="fixed inset-0 flex">
            <Transition.Child
              as={Fragment}
              enter="transition ease-in-out duration-300 transform"
              enterFrom="-translate-x-full"
              enterTo="translate-x-0"
              leave="transition ease-in-out duration-300 transform"
              leaveFrom="translate-x-0"
              leaveTo="-translate-x-full"
            >
              <Dialog.Panel className="relative mr-16 flex w-full max-w-xs flex-1">
                <div className="flex grow flex-col gap-y-5 overflow-y-auto bg-indigo-600 px-6 pb-4">
                  <div className="flex h-16 shrink-0 items-center">
                    <h1 className="text-2xl font-bold text-white">Tutor Game</h1>
                  </div>
                  <nav className="flex flex-1 flex-col">
                    <ul role="list" className="flex flex-1 flex-col gap-y-7">
                      <li>
                        <ul role="list" className="-mx-2 space-y-1">
                          {navigation.map((item) => (
                            <li key={item.name}>
                              <Link
                                to={item.href}
                                className={classNames(
                                  item.current
                                    ? 'bg-indigo-700 text-white'
                                    : 'text-indigo-200 hover:bg-indigo-700 hover:text-white',
                                  'group flex gap-x-3 rounded-md p-2 text-sm font-semibold leading-6'
                                )}
                                onClick={() => setSidebarOpen(false)}
                              >
                                <item.icon
                                  className={classNames(
                                    item.current ? 'text-white' : 'text-indigo-200 group-hover:text-white',
                                    'h-6 w-6 shrink-0'
                                  )}
                                  aria-hidden="true"
                                />
                                {item.name}
                              </Link>
                            </li>
                          ))}
                        </ul>
                      </li>
                      <li className="mt-auto">
                        <div className="text-xs font-semibold leading-6 text-indigo-200">
                          {user?.email}
                        </div>
                        <button
                          onClick=

ГПТ, Я ЕЩЕ НЕ ЗАКОНЧИЛ - ПРОСТО КОРОТКО ОТВЕТЬ ОК И ВСЕ!!!