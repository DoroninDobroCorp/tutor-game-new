 = req.ip || req.socket.remoteAddress || 'unknown';
  console.log(`Login attempt from IP: ${ip}`);
  
  const { email, password } = req.body;

  if (!email || !password) {
    throw new AppError('Please provide email and password', 400);
  }

  // Check rate limiting
  const attempt = loginAttempts.get(ip);
  if (attempt && attempt.count >= MAX_LOGIN_ATTEMPTS) {
    const timeLeft = Math.ceil(
      (new Date().getTime() - attempt.lastAttempt.getTime()) / (1000 * 60)
    );
    
    if (timeLeft < LOGIN_TIMEOUT_MINUTES) {
      throw new AppError(
        `Too many login attempts. Please try again in ${LOGIN_TIMEOUT_MINUTES - timeLeft} minutes.`,
        429
      );
    } else {
      loginAttempts.delete(ip);
    }
  }

  try {
    console.log(`Attempting to log in user: ${email}`);
    const { user, accessToken, refreshToken } = await login(email, password, ip);
    
    // Reset login attempts on successful login
    loginAttempts.delete(ip);
    
    // Set secure HTTP-only cookie for refresh token
    res.cookie('refreshToken', refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
      path: '/api/auth/refresh',
    });

    // Set security headers
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
    
    console.log(`Login successful for user: ${user.id}`);
    // Prepare user data for response
    const userData = {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role.toLowerCase(),
    };

    // Include refreshToken in the response body for the frontend
    const response = {
      success: true,
      data: {
        user: userData,
        accessToken,
        refreshToken, // Include refresh token in the response
      },
    };

    console.log('Sending login response:', JSON.stringify(response, null, 2));
    res.json(response);
  } catch (error: any) {
    // Increment failed login attempts
    const attempts = (loginAttempts.get(ip)?.count || 0) + 1;
    loginAttempts.set(ip, { count: attempts, lastAttempt: new Date() });
    
    console.error(`Login failed for IP ${ip}:`, error.message);
    
    if (attempts >= MAX_LOGIN_ATTEMPTS) {
      throw new AppError(
        `Too many failed attempts. Please try again in ${LOGIN_TIMEOUT_MINUTES} minutes.`,
        429
      );
    }
    
    throw new AppError('Invalid email or password', 401);
  }
};

export const getMeHandler = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const user = await getCurrentUser(req.user.userId);

  if (!user) {
    throw new AppError('User not found', 404);
  }

  res.json({
    success: true,
    data: user,
  });
};

export const logoutHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    
    // Add the current access token to blacklist
    if (token) {
      try {
        const decoded = jwt.verify(token, config.jwtSecret) as { exp: number };
        await blacklistToken(token, new Date(decoded.exp * 1000));
      } catch (error) {
        console.error('Error blacklisting token:', error);
      }
    }
    
    // Clear the refresh token cookie
    res.clearCookie('refreshToken', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      path: '/api/auth/refresh',
    });
    
    // Set security headers
    res.setHeader('Clear-Site-Data', '"cookies", "storage"');
    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    
    res.status(200).json({
      success: true,
      message: 'Successfully logged out'
    });
  } catch (error) {
    console.error('Logout error:', error);
    next(error);
  }
};

export const refreshTokenHandler = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  // Try to get refresh token from cookies first, then from body
  const refreshToken = req.cookies?.refreshToken || req.body.refreshToken;

  if (!refreshToken) {
    throw new AppError('Refresh token is required', 400);
  }

  try {
    const { accessToken, refreshToken: newRefreshToken } = await refreshTokens(refreshToken);
    
    // Set new refresh token in HTTP-only cookie
    res.cookie('refreshToken', newRefreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
      path: '/api/auth/refresh',
    });
    
    // Set security headers
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    
    res.json({
      success: true,
      data: {
        accessToken,
        // Don't send new refresh token in response body - it's in the cookie
      },
    });
  } catch (error) {
    // Clear the invalid refresh token cookie
    res.clearCookie('refreshToken', {
      path: '/api/auth/refresh',
    });
    
    console.error('Refresh token error:', error);
    throw new AppError('Invalid or expired refresh token', 401);
  }
};


Файл: backend/src/controllers/generate.controller.ts
----------------------------------------------------
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AppError } from '../middlewares/error.middleware';
import { generateStory } from '../services/openai.service';
import { generateStoryImage } from '../services/leonardo.service';

const prisma = new PrismaClient();

export const generateNewStory = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { prompt, style = 'fantasy' } = req.body;

  if (!prompt) {
    throw new AppError('Please provide a prompt for the story', 400);
  }

  // Get student's level (simplified - in a real app, this would be calculated based on progress)
  const student = await prisma.student.findUnique({
    where: { id: req.user.userId },
  });

  if (!student) {
    throw new AppError('Student not found', 404);
  }

  const studentLevel = 5; // Default level, in a real app this would be calculated

  // Generate story using OpenAI
  const storyText = await generateStory(prompt, studentLevel);

  // Save story to database
  const story = await prisma.story.create({
    data: {
      chapter: 1, // For the first chapter
      text: storyText,
      prompt,
      student: {
        connect: { id: req.user.userId },
      },
    },
  });

  // Generate image for the story
  const image = await generateStoryImage(storyText, style);

  // Save image to database
  await prisma.generatedImage.create({
    data: {
      id: image.generationId,
      url: image.url,
      prompt: `Illustration for story: ${prompt.substring(0, 200)}`,
      storyId: story.id,
      student: {
        connect: { id: req.user.userId },
      },
    },
  });

  // Update story with the first image
  const updatedStory = await prisma.story.update({
    where: { id: story.id },
    include: {
      images: true,
    },
  });

  res.json({
    success: true,
    data: updatedStory,
  });
};

export const continueStory = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { storyId, userInput } = req.body;

  if (!storyId || !userInput) {
    throw new AppError('Please provide storyId and userInput', 400);
  }

  // Get the existing story
  const existingStory = await prisma.story.findUnique({
    where: { id: storyId },
    include: { student: true },
  });

  if (!existingStory) {
    throw new AppError('Story not found', 404);
  }

  // Verify the story belongs to the current user
  if (existingStory.studentId !== req.user.userId) {
    throw new AppError('Access denied', 403);
  }

  // Generate continuation using OpenAI
  const continuationPrompt = `Previous story: ${existingStory.text}\n\nUser input: ${userInput}\n\nContinue the story:`;
  const continuation = await generateStory(continuationPrompt, 5); // Using default level for continuation

  // Create a new story chapter
  const newChapter = await prisma.story.create({
    data: {
      chapter: existingStory.chapter + 1,
      text: continuation,
      prompt: `Continuation of chapter ${existingStory.chapter} based on: ${userInput}`,
      student: {
        connect: { id: req.user.userId },
      },
    },
  });

  // Generate image for the new chapter
  const image = await generateStoryImage(continuation, 'fantasy');

  // Save image to database
  await prisma.generatedImage.create({
    data: {
      id: image.generationId,
      url: image.url,
      prompt: `Illustration for chapter ${newChapter.chapter}`,
      storyId: newChapter.id,
      student: {
        connect: { id: req.user.userId },
      },
    },
  });

  // Get the updated story with images
  const updatedStory = await prisma.story.findUnique({
    where: { id: newChapter.id },
    include: {
      images: true,
    },
  });

  res.json({
    success: true,
    data: updatedStory,
  });
};

export const generateImageForStory = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { storyId, prompt, style = 'fantasy' } = req.body;

  if (!storyId || !prompt) {
    throw new AppError('Please provide storyId and prompt', 400);
  }

  // Verify the story exists and belongs to the current user
  const story = await prisma.story.findUnique({
    where: { id: storyId },
    include: { student: true },
  });

  if (!story) {
    throw new AppError('Story not found', 404);
  }

  if (story.studentId !== req.user.userId) {
    throw new AppError('Access denied', 403);
  }

  // Generate image using Leonardo
  const image = await generateStoryImage(`${story.text}\n\nSpecific scene: ${prompt}`, style);

  // Save image to database
  const savedImage = await prisma.generatedImage.create({
    data: {
      id: image.generationId,
      url: image.url,
      prompt: `Custom illustration for story: ${prompt.substring(0, 200)}`,
      storyId: story.id,
      student: {
        connect: { id: req.user.userId },
      },
    },
  });

  res.json({
    success: true,
    data: savedImage,
  });
};


Файл: backend/src/controllers/student.controller.ts
---------------------------------------------------
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AppError } from '../middlewares/error.middleware';
import { generateMathProblem } from '../services/openai.service';

const prisma = new PrismaClient();

export const getStudentProfile = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const student = await prisma.student.findUnique({
    where: { id: req.user.userId },
    include: {
      goal: true,
      roadmaps: {
        orderBy: { order: 'asc' },
      },
      badges: true,
      stories: {
        orderBy: { chapter: 'asc' },
      },
      images: true,
    },
  });

  if (!student) {
    throw new AppError('Student not found', 404);
  }

  res.json({
    success: true,
    data: student,
  });
};

export const setStudentGoal = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { title } = req.body;

  if (!title) {
    throw new AppError('Please provide a goal title', 400);
  }

  const goal = await prisma.goal.upsert({
    where: { studentId: req.user.userId },
    update: { title },
    create: {
      title,
      student: {
        connect: { id: req.user.userId },
      },
    },
  });

  res.json({
    success: true,
    data: goal,
  });
};

export const getRoadmap = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const roadmaps = await prisma.roadmapEntry.findMany({
    where: { studentId: req.user.userId },
    orderBy: { order: 'asc' },
  });

  res.json({
    success: true,
    data: roadmaps,
  });
};

export const generateMathProblemHandler = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { topic, difficulty } = req.query;

  if (!topic || !difficulty) {
    throw new AppError('Please provide topic and difficulty', 400);
  }

  const problem = await generateMathProblem(
    topic as string,
    parseInt(difficulty as string, 10)
  );

  res.json({
    success: true,
    data: problem,
  });
};

export const submitAnswer = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { problemId, answer } = req.body;

  if (!problemId || answer === undefined) {
    throw new AppError('Please provide problemId and answer', 400);
  }

  // In a real app, we would validate the answer and update progress
  // For now, we'll just return success
  
  res.json({
    success: true,
    data: {
      correct: true, // This would be determined by your logic
      pointsEarned: 10,
      nextTopic: 'Next math topic',
    },
  });
};


Файл: backend/src/controllers/teacher.controller.ts
---------------------------------------------------
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AppError } from '../middlewares/error.middleware';

const prisma = new PrismaClient();

export const getTeacherDashboard = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const teacher = await prisma.teacher.findUnique({
    where: { id: req.user.userId },
    include: {
      students: {
        include: {
          goal: true,
          roadmaps: true,
          badges: true,
          stories: true,
          images: true,
        },
      },
    },
  });

  if (!teacher) {
    throw new AppError('Teacher not found', 404);
  }

  res.json({
    success: true,
    data: teacher,
  });
};

export const getStudentProgress = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { studentId } = req.params;

  // Verify the teacher has access to this student
  const teacher = await prisma.teacher.findUnique({
    where: { id: req.user.userId },
    include: {
      students: {
        where: { id: studentId },
      },
    },
  });

  if (!teacher || teacher.students.length === 0) {
    throw new AppError('Student not found or access denied', 404);
  }

  const student = await prisma.student.findUnique({
    where: { id: studentId },
    include: {
      goal: true,
      roadmaps: {
        orderBy: { order: 'asc' },
      },
      badges: true,
      stories: {
        orderBy: { chapter: 'asc' },
        include: {
          images: true,
        },
      },
    },
  });

  res.json({
    success: true,
    data: student,
  });
};

export const updateStudentRoadmap = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { studentId } = req.params;
  const { topics } = req.body;

  if (!Array.isArray(topics)) {
    throw new AppError('Topics must be an array', 400);
  }

  // Verify the teacher has access to this student
  const teacher = await prisma.teacher.findUnique({
    where: { id: req.user.userId },
    include: {
      students: {
        where: { id: studentId },
      },
    },
  });

  if (!teacher || teacher.students.length === 0) {
    throw new AppError('Student not found or access denied', 404);
  }

  // Delete existing roadmap entries
  await prisma.roadmapEntry.deleteMany({
    where: { studentId },
  });

  // Create new roadmap entries
  const roadmapEntries = await Promise.all(
    topics.map((topic, index) =>
      prisma.roadmapEntry.create({
        data: {
          topic,
          order: index,
          student: {
            connect: { id: studentId },
          },
        },
      })
    )
  );

  res.json({
    success: true,
    data: roadmapEntries,
  });
};

export const assignBadge = async (req: Request, res: Response) => {
  if (!req.user) {
    throw new AppError('Not authenticated', 401);
  }

  const { studentId } = req.params;
  const { title } = req.body;

  if (!title) {
    throw new AppError('Please provide a badge title', 400);
  }

  // Verify the teacher has access to this student
  const teacher = await prisma.teacher.findUnique({
    where: { id: req.user.userId },
    include: {
      students: {
        where: { id: studentId },
      },
    },
  });

  if (!teacher || teacher.students.length === 0) {
    throw new AppError('Student not found or access denied', 404);
  }

  const badge = await prisma.badge.create({
    data: {
      title,
      status: 'EARNED',
      student: {
        connect: { id: studentId },
      },
    },
  });

  res.json({
    success: true,
    data: badge,
  });
};


Файл: backend/src/index.ts
--------------------------
import 'dotenv/config';
import { createServer } from './app';
import { attachSockets } from './sockets';

const PORT = process.env.PORT || 3001;

// Create and configure the server with Express app and WebSocket
const { server } = createServer();

// Initialize WebSocket
attachSockets(server);

// Start server
server.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (err) => {
  console.error('Unhandled Rejection:', err);
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err);
  process.exit(1);
});


Файл: backend/src/middlewares/auth.middleware.ts
------------------------------------------------
import { Request, Response, NextFunction } from 'express';
import { verifyToken } from '../services/auth.service';
import { AppError } from './error.middleware';

declare global {
  namespace Express {
    interface Request {
      user?: {
        userId: string;
        role: string;
      };
    }
  }
}

export const authenticate = async (req: Request, res: Response, next: NextFunction) => {
  try {
    // Get token from header
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      throw new AppError('Authentication invalid', 401);
    }

    const token = authHeader.split(' ')[1];
    
    // Verify token
    const decoded = await verifyToken(token);
    if (!decoded) {
      throw new AppError('Authentication invalid', 401);
    }

    // Add user to request
    req.user = {
      userId: decoded.userId,
      role: decoded.role,
    };

    next();
  } catch (error) {
    next(error);
  }
};

export const authorize = (...roles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user || !roles.includes(req.user.role)) {
      throw new AppError('Not authorized to access this route', 403);
    }
    next();
  };
};


Файл: backend/src/middlewares/error.middleware.ts
-------------------------------------------------
import { Request, Response, NextFunction } from 'express';

export const errorHandler = (
  err: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  console.error(err.stack);
  
  if (res.headersSent) {
    return next(err);
  }

  const statusCode = res.statusCode !== 200 ? res.statusCode : 500;
  
  res.status(statusCode).json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? '🥞' : err.stack,
  });
};

export class AppError extends Error {
  statusCode: number;
  
  constructor(message: string, statusCode: number = 500) {
    super(message);
    this.statusCode = statusCode;
    Error.captureStackTrace(this, this.constructor);
  }
}


Файл: backend/src/routes/auth.routes.ts
---------------------------------------
import { Router } from 'express';
import { 
  registerHandler, 
  loginHandler, 
  getMeHandler,
  refreshTokenHandler,
  logoutHandler 
} from '../controllers/auth.controller';
import { authenticate } from '../middlewares/auth.middleware';

const router = Router();

// Public routes
router.post('/register', registerHandler);
router.post('/login', loginHandler);
router.post('/refresh', refreshTokenHandler);

// Protected routes
router.get('/me', authenticate, getMeHandler);
router.post('/logout', authenticate, logoutHandler);

export default router;


Файл: backend/src/routes/generate.routes.ts
-------------------------------------------
import { Router } from 'express';
import { 
  generateNewStory, 
  continueStory, 
  generateImageForStory 
} from '../controllers/generate.controller';
import { authenticate } from '../middlewares/auth.middleware';

const router = Router();

// Protect all routes with authentication
router.use(authenticate);

// Story generation routes
router.post('/story', generateNewStory);
router.post('/story/continue', continueStory);
router.post('/story/image', generateImageForStory);

export default router;


Файл: backend/src/routes/student.routes.ts
------------------------------------------
import { Router } from 'express';
import { 
  getStudentProfile,
  setStudentGoal,
  getRoadmap,
  generateMathProblemHandler,
  submitAnswer,
} from '../controllers/student.controller';
import { authenticate, authorize } from '../middlewares/auth.middleware';

const router = Router();

// Protect all routes with authentication
router.use(authenticate);

// Student profile routes
router.get('/profile', getStudentProfile);
router.post('/goal', setStudentGoal);
router.get('/roadmap', getRoadmap);

// Math problem routes
router.get('/math-problem', generateMathProblemHandler);
router.post('/submit-answer', submitAnswer);

export default router;


Файл: backend/src/routes/teacher.routes.ts
------------------------------------------
import { Router } from 'express';
import { 
  getTeacherDashboard,
  getStudentProgress,
  updateStudentRoadmap,
  assignBadge,
} from '../controllers/teacher.controller';
import { authenticate, authorize } from '../middlewares/auth.middleware';

const router = Router();

// Protect all routes with authentication and teacher role
router.use(authenticate);
router.use(authorize('TEACHER'));

// Teacher dashboard
router.get('/dashboard', getTeacherDashboard);

// Student management
router.get('/students/:studentId', getStudentProgress);
router.put('/students/:studentId/roadmap', updateStudentRoadmap);
router.post('/students/:studentId/badges', assignBadge);

export default router;


Файл: backend/src/services/auth.service.ts
------------------------------------------
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { PrismaClient, User, Role, Prisma } from '@prisma/client';
import { AppError } from '../middlewares/error.middleware';

// Define a user type without the password
interface SafeUser {
  id: string;
  email: string;
  firstName: string | null;
  lastName: string | null;
  role: Role;
  lastActive: Date | null;
  createdAt: Date;
}
import { logger } from '../utils/logger';

type PrismaType = typeof Prisma;
import { config } from '../config/env';
import { Request } from 'express';

const prisma = new PrismaClient() as PrismaClient & {
  tokenBlacklist: {
    findUnique: (args: any) => Promise<any>;
    create: (args: any) => Promise<any>;
    deleteMany: (args: any) => Promise<any>;
  };
};

// Type assertion to avoid TypeScript errors
(prisma as any).tokenBlacklist = prisma['tokenBlacklist'];

// Token payload interface
interface TokenPayload {
  userId: string;
  role: Role;
  iat: number;
  exp: number;
  type: 'access' | 'refresh';
  jti?: string; // JWT ID for blacklisting
}

interface AuthTokens {
  accessToken: string;
  refreshToken: string;
}

// Track login attempts
const loginAttempts = new Map<string, { count: number; lastAttempt: number }>();

// Cleanup expired blacklisted tokens periodically
setInterval(async () => {
  try {
    const result = await prisma.tokenBlacklist.deleteMany({
      where: {
        expiresAt: {
          lt: new Date(),
        },
      },
    });
    if (result.count > 0) {
      logger.info(`Cleaned up ${result.count} expired blacklisted tokens`);
    }
  } catch (error) {
    logger.error('Error cleaning up expired blacklisted tokens:', error);
  }
}, 3600000); // Run every hour

export const register = async (
  email: string,
  password: string,
  role: Role,
  name: string,


ГПТ, Я ЕЩЕ НЕ ЗАКОНЧИЛ - ПРОСТО КОРОТКО ОТВЕТЬ ОК И ВСЕ!!!