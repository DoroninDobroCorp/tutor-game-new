): Promise<AuthResponse> => {
  logger.info(`Registration attempt for email: ${email}, role: ${role}`);
  
  // Validate email format
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    logger.warn(`Invalid email format: ${email}`);
    throw new AppError('Invalid email format', 400);
  }

  // Validate password strength (simplified)
  if (password.length < 4) {
    throw new AppError('Password must be at least 4 characters long', 400);
  }

  try {
    // Check if user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email },
      select: { id: true },
    });

    if (existingUser) {
      logger.warn(`Registration failed - user already exists: ${email}`);
      throw new AppError('User with this email already exists', 400);
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12);
    
    // Start transaction
    const result = await prisma.$transaction(async (tx) => {
      // Create user data with all required fields
      const [firstName, ...lastNameParts] = name.split(' ');
      
      // Create user
      const user = await tx.user.create({
        data: {
          email,
          password: hashedPassword,
          role,
          firstName,
          lastName: lastNameParts.length > 0 ? lastNameParts.join(' ') : null,
          lastActive: new Date()
        },
      });

      // Create corresponding profile based on role
      if (role === 'TEACHER') {
        await tx.teacher.create({
          data: { 
            userId: user.id,
            // Add any required fields for teacher
          },
        });
      } else {
        // For students, create a student record without a teacher initially
        // The teacher can be assigned later
        await tx.student.create({
          data: {
            userId: user.id,
            // No need to set teacherId as it's now optional
          },
        });
      }

      return user;
    });

    logger.info(`User registered successfully: ${result.id}`);
    return await generateTokens(result);
  } catch (error) {
    logger.error('Registration error:', error);
    throw new AppError('Failed to register user', 500);
  }
};

export const login = async (email: string, password: string, ipAddress: string): Promise<{ user: SafeUser; accessToken: string; refreshToken: string }> => {
  const MAX_ATTEMPTS = 5;
  const LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes
  
  logger.info(`Login attempt for email: ${email} from IP: ${ipAddress}`);
  
  // Check rate limiting
  const now = Date.now();
  const attempt = loginAttempts.get(ipAddress) || { count: 0, lastAttempt: 0 };
  
  if (attempt.count >= MAX_ATTEMPTS) {
    const timeSinceLastAttempt = now - attempt.lastAttempt;
    if (timeSinceLastAttempt < LOCKOUT_DURATION) {
      const timeLeft = Math.ceil((LOCKOUT_DURATION - timeSinceLastAttempt) / 60000);
      throw new AppError(`Too many login attempts. Please try again in ${timeLeft} minutes.`, 429);
    } else {
      // Reset attempt count if lockout period has passed
      loginAttempts.delete(ipAddress);
    }
  }

  // Find user with password
  const user = await prisma.user.findUnique({ 
    where: { email },
    include: { teacher: true, student: true },
  });
  
  if (!user) {
    // Track failed attempt
    loginAttempts.set(ipAddress, {
      count: (loginAttempts.get(ipAddress)?.count || 0) + 1,
      lastAttempt: now
    });
    
    throw new AppError('Invalid email or password', 401);
  }

  // Check password
  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    // Track failed attempt
    loginAttempts.set(ipAddress, {
      count: (loginAttempts.get(ipAddress)?.count || 0) + 1,
      lastAttempt: now
    });
    
    throw new AppError('Invalid email or password', 401);
  }
  
  // Reset login attempts on successful login
  loginAttempts.delete(ipAddress);

  // Generate and return tokens
  return await generateTokens(user);
};

export const getCurrentUser = async (userId: string): Promise<SafeUser | null> => {
  const user = await prisma.user.findUnique({
    where: { id: userId },
  });
  
  if (!user) return null;
  
  const { password, ...userData } = user;
  return userData as SafeUser;
};

export const generateToken = (user: User, type: 'access' | 'refresh' = 'access'): string => {
  const now = Math.floor(Date.now() / 1000);
  const expiresIn = type === 'access' ? '15m' : '7d';
  
  const payload: Omit<TokenPayload, 'exp' | 'iat'> = {
    userId: user.id,
    role: user.role,
    type,
  };

  return jwt.sign(
    payload,
    config.jwtSecret,
    { 
      expiresIn,
    }
  );
};

interface AuthResponse {
  user: SafeUser;
  accessToken: string;
  refreshToken: string;
}

export const generateTokens = async (user: User): Promise<AuthResponse> => {
  const accessToken = generateToken(user, 'access');
  const refreshToken = generateToken(user, 'refresh');

  // Get fresh user data to ensure we have all fields
  const currentUser = await prisma.user.findUnique({
    where: { id: user.id },
  });

  if (!currentUser) {
    throw new AppError('User not found', 404);
  }

  const { password: _, ...userData } = currentUser;
  
  return {
    user: userData as SafeUser,
    accessToken,
    refreshToken
  };
};

export const isTokenBlacklisted = async (token: string): Promise<boolean> => {
  const hashedToken = await bcrypt.hash(token, 10);
  const blacklistedToken = await prisma.tokenBlacklist.findUnique({
    where: { token: hashedToken },
  } as any);
  return !!blacklistedToken;
};

export const blacklistToken = async (token: string, expiresAt: Date): Promise<void> => {
  const hashedToken = await bcrypt.hash(token, 10);
  await prisma.tokenBlacklist.create({
    data: {
      token: hashedToken,
      expiresAt,
    },
  } as any);

  // Clean up expired tokens in the background
  await prisma.tokenBlacklist.deleteMany({
    where: {
      expiresAt: {
        lt: new Date()
      }
    }
  } as any);
};

export const verifyToken = async (token: string): Promise<TokenPayload | null> => {
  try {
    // Check if token is blacklisted
    if (await isTokenBlacklisted(token)) {
      return null;
    }
    
    const decoded = jwt.verify(token, config.jwtSecret) as TokenPayload;
    return decoded;
  } catch (error) {
    return null;
  }
};

export const refreshTokens = async (refreshToken: string): Promise<AuthResponse> => {
  // Verify refresh token
  const decoded = await verifyToken(refreshToken);
  if (!decoded || decoded.type !== 'refresh') {
    throw new AppError('Invalid refresh token', 401);
  }
  
  // Blacklist the used refresh token
  await blacklistToken(
    refreshToken, 
    new Date(decoded.exp! * 1000) // Use token expiration time
  );

  // Get user
  const user = await prisma.user.findUnique({
    where: { id: decoded.userId },
    include: { teacher: true, student: true },
  });

  if (!user) {
    throw new Error('User not found');
  }

  // Generate new tokens
  return generateTokens(user);
};


Файл: backend/src/services/leonardo.service.ts
----------------------------------------------
import axios from 'axios';
import { config } from '../config/env';

const LEONARDO_API_URL = 'https://cloud.leonardo.ai/api/rest/v1';

interface GenerateImageParams {
  prompt: string;
  negativePrompt?: string;
  width?: number;
  height?: number;
  modelId?: string;
  numImages?: number;
  guidanceScale?: number;
  scheduler?: string;
  numInferenceSteps?: number;
  presetStyle?: string;
}

export const generateImage = async (params: GenerateImageParams) => {
  try {
    // Check if API key is available
    if (!config.leonardo.apiKey) {
      throw new Error('Leonardo API key is not configured');
    }

    const {
      prompt,
      negativePrompt = '',
      width = 512,
      height = 512,
      modelId = config.leonardo.modelId,
      numImages = 1,
      guidanceScale = 7,
      scheduler = 'LEONARDO',
      numInferenceSteps = 30,
      presetStyle = 'LEONARDO',
    } = params;

    // Start generation
    const generationResponse = await axios.post(
      `${LEONARDO_API_URL}/generations`, 
      {
        height,
        width,
        prompt: {
          prompt,
          negativePrompt,
        },
        modelId,
        num_images: numImages,
        guidance_scale: guidanceScale,
        scheduler,
        num_inference_steps: numInferenceSteps,
        presetStyle,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${config.leonardo.apiKey}`,
        },
      }
    );

    const generationId = generationResponse.data.sdGenerationJob.generationId;
    
    // Poll for result
    let imageUrl: string | null = null;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (!imageUrl && attempts < maxAttempts) {
      attempts++;
      
      // Wait before checking again
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const statusResponse = await axios.get(
        `${LEONARDO_API_URL}/generations/${generationId}`,
        {
          headers: {
            'Authorization': `Bearer ${config.leonardo.apiKey}`,
          },
        }
      );
      
      const generation = statusResponse.data.generations_by_pk;
      
      if (generation.status === 'COMPLETE' && generation.generated_images?.length > 0) {
        imageUrl = generation.generated_images[0].url;
        break;
      } else if (generation.status === 'FAILED') {
        throw new Error('Image generation failed');
      }
    }
    
    if (!imageUrl) {
      throw new Error('Image generation timed out');
    }
    
    return {
      url: imageUrl,
      generationId,
    };
    
  } catch (error) {
    console.error('Error generating image with Leonardo:', error);
    throw new Error('Failed to generate image');
  }
};

export const generateStoryImage = async (storyText: string, style: string = 'fantasy') => {
  const prompt = `Create an illustration for a children's educational story. Style: ${style}. Story context: ${storyText.substring(0, 500)}`;
  
  return generateImage({
    prompt,
    negativePrompt: 'text, watermark, signature, low quality, blurry, distorted, extra limbs, extra fingers, deformed face',
    width: 768,
    height: 512,
    numImages: 1,
    presetStyle: style.toUpperCase(),
  });
};


Файл: backend/src/services/openai.service.ts
--------------------------------------------
import OpenAI from 'openai';
import { config } from '../config/env';

const openai = new OpenAI({
  apiKey: config.openaiApiKey,
});

export const generateStory = async (prompt: string, studentLevel: number) => {
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: `You are a creative storyteller that creates engaging educational stories for students. 
          The story should be appropriate for a student with a math level of ${studentLevel}/10. 
          Make it fun, interactive and include math problems naturally in the narrative.`,
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.8,
      max_tokens: 1000,
    });

    return completion.choices[0]?.message?.content || 'Unable to generate story';
  } catch (error) {
    console.error('Error generating story with OpenAI:', error);
    throw new Error('Failed to generate story');
  }
};

export const generateMathProblem = async (topic: string, difficulty: number) => {
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: `Create a math problem about ${topic} with difficulty ${difficulty}/10. 
          Format the response as JSON with the following structure:
          {
            "question": "The math problem",
            "options": ["option1", "option2", "option3", "option4"],
            "correctAnswer": 0, // index of the correct answer
            "explanation": "Step-by-step solution"
          }`,
        },
      ],
      temperature: 0.5,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) throw new Error('No content received from OpenAI');
    
    return JSON.parse(content);
  } catch (error) {
    console.error('Error generating math problem with OpenAI:', error);
    throw new Error('Failed to generate math problem');
  }
};


Файл: backend/src/services/websocket.service.ts
-----------------------------------------------
import { Server as HttpServer } from 'http';
import { Server, Socket } from 'socket.io';
import { verifyToken as authVerifyToken } from './auth.service';
import { JwtPayload } from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface AuthenticatedSocket extends Socket {
  user?: {
    userId: string;
    role: 'STUDENT' | 'TEACHER';
  };
}

class WebSocketService {
  private io: Server;
  private connectedUsers: Map<string, string> = new Map(); // userId -> socketId

  constructor(server: HttpServer) {
    this.io = new Server(server, {
      cors: {
        origin: process.env.FRONTEND_URL || 'http://localhost:3000',
        methods: ['GET', 'POST'],
      },
    });

    this.initializeMiddleware();
    this.initializeConnection();
  }

  private initializeMiddleware() {
    this.io.use(async (socket: AuthenticatedSocket, next) => {
      try {
        const token = socket.handshake.auth.token;
        if (!token) {
          return next(new Error('Authentication error'));
        }

        // Properly await the async verifyToken function
        const decoded = await authVerifyToken(token);
        if (!decoded || !decoded.userId || !decoded.role) {
          return next(new Error('Invalid token'));
        }

        // Type check to ensure we have the correct role type
        if (decoded.role !== 'STUDENT' && decoded.role !== 'TEACHER') {
          return next(new Error('Invalid user role'));
        }

        // Attach user to socket for later use
        socket.user = {
          userId: decoded.userId,
          role: decoded.role
        };
        next();
      } catch (error) {
        console.error('WebSocket authentication error:', error);
        next(new Error('Authentication error'));
      }
    });
  }

  private initializeConnection() {
    this.io.on('connection', (socket: AuthenticatedSocket) => {
      if (!socket.user) return;

      const { userId, role } = socket.user;
      console.log(`User connected: ${userId} (${role})`);

      // Store the socket ID for this user
      this.connectedUsers.set(userId, socket.id);

      // Notify all clients about the updated user list
      this.broadcastUserList();

      // Handle private messages
      socket.on('sendMessage', async (data: { recipientId: string; content: string }) => {
        try {
          const { recipientId, content } = data;
          const senderId = socket.user?.userId;

          if (!senderId || !recipientId || !content) return;

          // Save message to database
          const message = await prisma.message.create({
            data: {
              content,
              sender: { connect: { id: senderId } },
              recipient: { connect: { id: recipientId } },
              read: false,
            },
            include: {
              sender: {
                select: { id: true, firstName: true, lastName: true, role: true },
              },
            },
          });

          // Emit to recipient if online
          const recipientSocketId = this.connectedUsers.get(recipientId);
          if (recipientSocketId) {
            this.io.to(recipientSocketId).emit('message', {
              id: message.id,
              senderId: message.senderId,
              senderName: `${message.sender.firstName} ${message.sender.lastName}`,
              senderRole: message.sender.role,
              content: message.content,
              timestamp: message.createdAt,
              read: message.read,
            });
          }

          // Also emit back to sender for UI update
          socket.emit('message', {
            id: message.id,
            senderId: message.senderId,
            senderName: `${message.sender.firstName} ${message.sender.lastName}`,
            senderRole: message.sender.role,
            content: message.content,
            timestamp: message.createdAt,
            read: message.read,
          });
        } catch (error) {
          console.error('Error sending message:', error);
        }
      });

      // Handle message read receipts
      socket.on('markAsRead', async (data: { messageId: string }) => {
        try {
          const { messageId } = data;
          const userId = socket.user?.userId;

          if (!userId) return;

          // Update message as read in the database
          await prisma.message.updateMany({
            where: {
              id: messageId,
              recipientId: userId,
              read: false,
            },
            data: {
              read: true,
              readAt: new Date(),
            },
          });
        } catch (error) {
          console.error('Error marking message as read:', error);
        }
      });

      // Handle get messages request
      socket.on('getMessages', async (data: { userId: string }) => {
        try {
          const { userId } = data;
          const currentUserId = socket.user?.userId;

          if (!currentUserId) return;

          // Get conversation between the two users
          const messages = await prisma.message.findMany({
            where: {
              OR: [
                { senderId: currentUserId, recipientId: userId },
                { senderId: userId, recipientId: currentUserId },
              ],
            },
            orderBy: { createdAt: 'asc' },
            include: {
              sender: {
                select: { id: true, firstName: true, lastName: true, role: true },
              },
            },
          });

          // Mark messages as read when they are loaded
          await prisma.message.updateMany({
            where: {
              senderId: userId,
              recipientId: currentUserId,
              read: false,
            },
            data: {
              read: true,
              readAt: new Date(),
            },
          });

          // Format and send messages to the client
          const formattedMessages = messages.map((msg: {
            id: string;
            senderId: string;
            sender: { firstName: string; lastName: string; role: string };
            content: string;
            createdAt: Date;
            read: boolean;
          }) => ({
            id: msg.id,
            senderId: msg.senderId,
            senderName: `${msg.sender.firstName} ${msg.sender.lastName}`,
            senderRole: msg.sender.role,
            content: msg.content,
            timestamp: msg.createdAt,
            read: msg.read,
          }));

          socket.emit('messages', formattedMessages);
        } catch (error) {
          console.error('Error fetching messages:', error);
        }
      });

      // Handle get users request
      socket.on('getUsers', async () => {
        try {
          const currentUser = socket.user;
          if (!currentUser) return;

          // Get all users except the current user
          const users = await prisma.user.findMany({
            where: {
              id: { not: currentUser.userId },
              // If teacher, show only students, if student, show only teachers
              ...(currentUser.role === 'TEACHER' 
                ? { role: 'STUDENT' } 
                : { role: 'TEACHER' }),
            },
            select: {
              id: true,
              firstName: true,
              lastName: true,
              role: true,
              lastActive: true,
            },
          });

          // Format users with online status
          const usersWithStatus = users.map((user: { id: string; firstName: string; lastName: string; role: string; lastActive: Date | null }) => ({
            id: user.id,
            name: `${user.firstName} ${user.lastName}`,
            role: user.role,
            isOnline: this.connectedUsers.has(user.id),
            lastSeen: user.lastActive,
          }));

          socket.emit('users', usersWithStatus);
        } catch (error) {
          console.error('Error fetching users:', error);
        }
      });

      // Handle disconnection
      socket.on('disconnect', () => {
        if (socket.user) {
          console.log(`User disconnected: ${socket.user.userId}`);
          this.connectedUsers.delete(socket.user.userId);
          this.broadcastUserList();
        }
      });
    });
  }

  private broadcastUserList() {
    // Broadcast updated user list to all connected clients
    const users = Array.from(this.connectedUsers.entries()).map(([userId, socketId]) => ({
      userId,
      socketId,
      isOnline: true,
    }));

    this.io.emit('userList', users);
  }

  public getIO(): Server {
    return this.io;
  }
}

export default WebSocketService;


Файл: backend/src/sockets/index.ts
----------------------------------
import { Server } from 'socket.io';
import { Server as HttpServer } from 'http';

export const attachSockets = (httpServer: HttpServer) => {
  const io = new Server(httpServer, {
    cors: {
      origin: '*',
      methods: ['GET', 'POST'],
    },
  });

  io.on('connection', (socket) => {
    console.log('New client connected');
    
    socket.on('joinStudentRoom', (studentId: string) => {
      socket.join(studentId);
      console.log(`Student ${studentId} joined their room`);
    });

    socket.on('disconnect', () => {
      console.log('Client disconnected');
    });
  });

  return {
    emitProgress: (studentId: string, payload: any) => {
      io.to(studentId).emit('progress', payload);
    },
  };
};

export type SocketIO = ReturnType<typeof attachSockets>;


Файл: backend/src/utils/errors.ts
---------------------------------
/**
 * Base error class for application-specific errors
 */
export class AppError extends Error {
  public readonly statusCode: number;
  public readonly isOperational: boolean;
  public readonly details?: any;

  constructor(
    message: string,
    statusCode: number = 500,
    isOperational: boolean = true,
    details?: any
  ) {
    super(message);
    this.statusCode = statusCode;
    this.isOperational = isOperational;
    this.details = details;

    // Ensure the error stack is captured
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    // Set the prototype explicitly (needed for instanceof)
    Object.setPrototypeOf(this, AppError.prototype);
  }
}

/**
 * 400 Bad Request Error
 */
export class BadRequestError extends AppError {
  constructor(message: string = 'Bad Request', details?: any) {
    super(message, 400, true, details);
  }
}

/**
 * 401 Unauthorized Error
 */
export class UnauthorizedError extends AppError {
  constructor(message: string = 'Unauthorized', details?: any) {
    super(message, 401, true, details);
  }
}

/**
 * 403 Forbidden Error
 */
export class ForbiddenError extends AppError {
  constructor(message: string = 'Forbidden', details?: any) {
    super(message, 403, true, details);
  }
}

/**
 * 404 Not Found Error
 */
export class NotFoundError extends AppError {
  constructor(message: string = 'Not Found', details?: any) {
    super(message, 404, true, details);
  }
}

/**
 * 409 Conflict Error
 */
export class ConflictError extends AppError {
  constructor(message: string = 'Conflict', details?: any) {
    super(message, 409, true, details);
  }
}

/**
 * 422 Unprocessable Entity Error (for validation errors)
 */
export class ValidationError extends AppError {
  public readonly errors: Record<string, string[]>;

  constructor(errors: Record<string, string[]>, message: string = 'Validation Error') {
    super(message, 422, true, { errors });
    this.errors = errors;
  }
}

/**
 * 429 Too Many Requests Error
 */
export class RateLimitError extends AppError {
  public readonly retryAfter: number;

  constructor(
    message: string = 'Too Many Requests',
    retryAfter: number = 900, // 15 minutes in seconds
    details?: any
  ) {
    super(message, 429, true, details);
    this.retryAfter = retryAfter;
  }
}

/**
 * 500 Internal Server Error
 */
export class InternalServerError extends AppError {
  constructor(message: string = 'Internal Server Error', details?: any) {
    super(message, 500, false, details);
  }
}

/**
 * 501 Not Implemented Error
 */
export class NotImplementedError extends AppError {
  constructor(message: string = 'Not Implemented', d

ГПТ, Я ЕЩЕ НЕ ЗАКОНЧИЛ - ПРОСТО КОРОТКО ОТВЕТЬ ОК И ВСЕ!!!