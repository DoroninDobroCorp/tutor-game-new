generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  firstName  String?
  lastName   String?
  lastActive DateTime?
  role       Role
  createdAt  DateTime   @default(now())
  
  teacher    Teacher?
  student    Student?
  sentMessages     Message[]  @relation("Sender")
  receivedMessages Message[]  @relation("Recipient")
}

model Teacher {
  userId   String   @id
  user     User     @relation(fields: [userId], references: [id])
  students Student[] @relation("TeachersAndStudents")
  // другие поля учителя
}

model Student {
  userId    String    @id
  user      User      @relation(fields: [userId], references: [id])
  teachers  Teacher[] @relation("TeachersAndStudents")
  goals     Goal[]
  bossBattles BossBattle[]
  roadmaps  RoadmapEntry[]
  badges    Badge[]
  stories   Story[]
  images    GeneratedImage[]
}



enum Role {
  STUDENT
  TEACHER
}

model Goal {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [userId])
  studentId String
  title     String
  createdAt DateTime @default(now())
}

model RoadmapEntry {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [userId])
  studentId String
  topic     String
  order     Int
  startAt   DateTime?
  finished  Boolean  @default(false)
}

model Badge {
  id        String   @id @default(uuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [userId])
  title     String
  status    BadgeStatus
}

model Story {
  id          String           @id @default(uuid())
  studentId   String
  student     Student          @relation(fields: [studentId], references: [userId])
  chapter     Int
  text        String
  prompt      String
  images      GeneratedImage[]  @relation("StoryImages")
  createdAt   DateTime         @default(now())
}

model GeneratedImage {
  id          String    @id @default(uuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [userId])
  storyId     String?
  story       Story?    @relation("StoryImages", fields: [storyId], references: [id])
  url         String
  prompt      String
  createdAt   DateTime  @default(now())
}

model BossBattle {
  id            String   @id @default(uuid())
  student       Student  @relation(fields: [studentId], references: [userId])
  studentId     String
  lives         Int
  timeLimitSec  Int
  difficulty    Int
  prompt        String
  createdAt     DateTime @default(now())
}

enum BadgeStatus {
  HIDDEN
  ACTIVE
  EARNED
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  content     String
  read        Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())
  
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
